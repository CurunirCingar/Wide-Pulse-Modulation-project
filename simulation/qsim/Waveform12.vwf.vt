// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/01/2016 10:39:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Generator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Generator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] inputBinaryLevel;
// wires                                               
wire [6:0] outputLED1;
wire [6:0] outputLED2;
wire [6:0] outputLED3;
wire [6:0] outputLED4;
wire [6:0] outputLED5;
wire [6:0] outputLED6;
wire outputSignal;
wire periodEnd;

// assign statements (if any)                          
Generator i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.inputBinaryLevel(inputBinaryLevel),
	.outputLED1(outputLED1),
	.outputLED2(outputLED2),
	.outputLED3(outputLED3),
	.outputLED4(outputLED4),
	.outputLED5(outputLED5),
	.outputLED6(outputLED6),
	.outputSignal(outputSignal),
	.periodEnd(periodEnd)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(166)
	begin
		clk = 1'b0;
		clk = #3000 1'b1;
		# 3000;
	end
	clk = 1'b0;
	clk = #3000 1'b1;
end 
// inputBinaryLevel[ 9 ]
initial
begin
	inputBinaryLevel[9] = 1'b0;
	inputBinaryLevel[9] = #140000 1'b1;
	inputBinaryLevel[9] = #240000 1'b0;
end 
// inputBinaryLevel[ 8 ]
initial
begin
	inputBinaryLevel[8] = 1'b0;
	inputBinaryLevel[8] = #140000 1'b1;
	inputBinaryLevel[8] = #240000 1'b0;
end 
// inputBinaryLevel[ 7 ]
initial
begin
	inputBinaryLevel[7] = 1'b0;
	inputBinaryLevel[7] = #140000 1'b1;
	inputBinaryLevel[7] = #240000 1'b0;
end 
// inputBinaryLevel[ 6 ]
initial
begin
	inputBinaryLevel[6] = 1'b0;
	inputBinaryLevel[6] = #140000 1'b1;
	inputBinaryLevel[6] = #240000 1'b0;
end 
// inputBinaryLevel[ 5 ]
initial
begin
	inputBinaryLevel[5] = 1'b0;
	inputBinaryLevel[5] = #140000 1'b1;
	inputBinaryLevel[5] = #240000 1'b0;
end 
// inputBinaryLevel[ 4 ]
initial
begin
	inputBinaryLevel[4] = 1'b0;
	inputBinaryLevel[4] = #140000 1'b1;
	inputBinaryLevel[4] = #240000 1'b0;
end 
// inputBinaryLevel[ 3 ]
initial
begin
	inputBinaryLevel[3] = 1'b0;
	inputBinaryLevel[3] = #140000 1'b1;
	inputBinaryLevel[3] = #240000 1'b0;
end 
// inputBinaryLevel[ 2 ]
initial
begin
	inputBinaryLevel[2] = 1'b0;
	inputBinaryLevel[2] = #140000 1'b1;
	inputBinaryLevel[2] = #240000 1'b0;
	inputBinaryLevel[2] = #400000 1'b1;
	inputBinaryLevel[2] = #80000 1'b0;
end 
// inputBinaryLevel[ 1 ]
initial
begin
	inputBinaryLevel[1] = 1'b0;
	inputBinaryLevel[1] = #140000 1'b1;
	inputBinaryLevel[1] = #240000 1'b0;
	inputBinaryLevel[1] = #400000 1'b1;
	inputBinaryLevel[1] = #80000 1'b0;
end 
// inputBinaryLevel[ 0 ]
initial
begin
	inputBinaryLevel[0] = 1'b0;
	inputBinaryLevel[0] = #140000 1'b1;
	inputBinaryLevel[0] = #240000 1'b0;
	inputBinaryLevel[0] = #150000 1'b1;
	inputBinaryLevel[0] = #70000 1'b0;
end 
endmodule

