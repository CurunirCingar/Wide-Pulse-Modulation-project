// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2016 19:48:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Generator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Generator_vlg_sample_tst(
	clk,
	inputBinaryLevel,
	sampler_tx
);
input  clk;
input [9:0] inputBinaryLevel;
output sampler_tx;

reg sample;
time current_time;
always @(clk or inputBinaryLevel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Generator_vlg_check_tst (
	outputLED1,
	outputLED2,
	outputLED3,
	outputLED4,
	outputLED5,
	outputLED6,
	outputSignal,
	sampler_rx
);
input [3:0] outputLED1;
input [3:0] outputLED2;
input [3:0] outputLED3;
input [3:0] outputLED4;
input [3:0] outputLED5;
input [3:0] outputLED6;
input  outputSignal;
input sampler_rx;

reg [3:0] outputLED1_expected;
reg [3:0] outputLED2_expected;
reg [3:0] outputLED3_expected;
reg [3:0] outputLED4_expected;
reg [3:0] outputLED5_expected;
reg [3:0] outputLED6_expected;
reg  outputSignal_expected;

reg [3:0] outputLED1_prev;
reg [3:0] outputLED2_prev;
reg [3:0] outputLED3_prev;
reg [3:0] outputLED4_prev;
reg [3:0] outputLED5_prev;
reg [3:0] outputLED6_prev;
reg  outputSignal_prev;

reg [3:0] outputLED1_expected_prev;
reg [3:0] outputLED2_expected_prev;
reg [3:0] outputLED3_expected_prev;
reg [3:0] outputLED4_expected_prev;
reg [3:0] outputLED5_expected_prev;
reg [3:0] outputLED6_expected_prev;
reg  outputSignal_expected_prev;

reg [3:0] last_outputLED1_exp;
reg [3:0] last_outputLED2_exp;
reg [3:0] last_outputLED3_exp;
reg [3:0] last_outputLED4_exp;
reg [3:0] last_outputLED5_exp;
reg [3:0] last_outputLED6_exp;
reg  last_outputSignal_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	outputLED1_prev = outputLED1;
	outputLED2_prev = outputLED2;
	outputLED3_prev = outputLED3;
	outputLED4_prev = outputLED4;
	outputLED5_prev = outputLED5;
	outputLED6_prev = outputLED6;
	outputSignal_prev = outputSignal;
end

// update expected /o prevs

always @(trigger)
begin
	outputLED1_expected_prev = outputLED1_expected;
	outputLED2_expected_prev = outputLED2_expected;
	outputLED3_expected_prev = outputLED3_expected;
	outputLED4_expected_prev = outputLED4_expected;
	outputLED5_expected_prev = outputLED5_expected;
	outputLED6_expected_prev = outputLED6_expected;
	outputSignal_expected_prev = outputSignal_expected;
end


// expected outputLED1[ 3 ]
initial
begin
	outputLED1_expected[3] = 1'bX;
	outputLED1_expected[3] = #999000 1'b0;
end 
// expected outputLED1[ 2 ]
initial
begin
	outputLED1_expected[2] = 1'bX;
	outputLED1_expected[2] = #999000 1'b0;
end 
// expected outputLED1[ 1 ]
initial
begin
	outputLED1_expected[1] = 1'bX;
	outputLED1_expected[1] = #999000 1'b0;
end 
// expected outputLED1[ 0 ]
initial
begin
	outputLED1_expected[0] = 1'bX;
	outputLED1_expected[0] = #999000 1'b0;
end 
// expected outputLED2[ 3 ]
initial
begin
	outputLED2_expected[3] = 1'bX;
	outputLED2_expected[3] = #999000 1'b0;
end 
// expected outputLED2[ 2 ]
initial
begin
	outputLED2_expected[2] = 1'bX;
	outputLED2_expected[2] = #999000 1'b0;
end 
// expected outputLED2[ 1 ]
initial
begin
	outputLED2_expected[1] = 1'bX;
	outputLED2_expected[1] = #999000 1'b0;
end 
// expected outputLED2[ 0 ]
initial
begin
	outputLED2_expected[0] = 1'bX;
	outputLED2_expected[0] = #999000 1'b0;
end 
// expected outputLED3[ 3 ]
initial
begin
	outputLED3_expected[3] = 1'bX;
	outputLED3_expected[3] = #999000 1'b0;
end 
// expected outputLED3[ 2 ]
initial
begin
	outputLED3_expected[2] = 1'bX;
	outputLED3_expected[2] = #999000 1'b0;
end 
// expected outputLED3[ 1 ]
initial
begin
	outputLED3_expected[1] = 1'bX;
	outputLED3_expected[1] = #999000 1'b0;
end 
// expected outputLED3[ 0 ]
initial
begin
	outputLED3_expected[0] = 1'bX;
	outputLED3_expected[0] = #999000 1'b0;
end 
// expected outputLED4[ 3 ]
initial
begin
	outputLED4_expected[3] = 1'bX;
	outputLED4_expected[3] = #999000 1'b0;
end 
// expected outputLED4[ 2 ]
initial
begin
	outputLED4_expected[2] = 1'bX;
	outputLED4_expected[2] = #999000 1'b0;
end 
// expected outputLED4[ 1 ]
initial
begin
	outputLED4_expected[1] = 1'bX;
	outputLED4_expected[1] = #999000 1'b0;
end 
// expected outputLED4[ 0 ]
initial
begin
	outputLED4_expected[0] = 1'bX;
	outputLED4_expected[0] = #999000 1'b0;
end 
// expected outputLED5[ 3 ]
initial
begin
	outputLED5_expected[3] = 1'bX;
	outputLED5_expected[3] = #999000 1'b0;
end 
// expected outputLED5[ 2 ]
initial
begin
	outputLED5_expected[2] = 1'bX;
	outputLED5_expected[2] = #999000 1'b0;
end 
// expected outputLED5[ 1 ]
initial
begin
	outputLED5_expected[1] = 1'bX;
	outputLED5_expected[1] = #999000 1'b0;
end 
// expected outputLED5[ 0 ]
initial
begin
	outputLED5_expected[0] = 1'bX;
	outputLED5_expected[0] = #999000 1'b0;
end 
// expected outputLED6[ 3 ]
initial
begin
	outputLED6_expected[3] = 1'bX;
	outputLED6_expected[3] = #999000 1'b0;
end 
// expected outputLED6[ 2 ]
initial
begin
	outputLED6_expected[2] = 1'bX;
	outputLED6_expected[2] = #999000 1'b0;
end 
// expected outputLED6[ 1 ]
initial
begin
	outputLED6_expected[1] = 1'bX;
	outputLED6_expected[1] = #999000 1'b0;
end 
// expected outputLED6[ 0 ]
initial
begin
	outputLED6_expected[0] = 1'bX;
	outputLED6_expected[0] = #999000 1'b0;
end 

// expected outputSignal
initial
begin
	outputSignal_expected = 1'bX;
	outputSignal_expected = #999000 1'b0;
end 
// generate trigger
always @(outputLED1_expected or outputLED1 or outputLED2_expected or outputLED2 or outputLED3_expected or outputLED3 or outputLED4_expected or outputLED4 or outputLED5_expected or outputLED5 or outputLED6_expected or outputLED6 or outputSignal_expected or outputSignal)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outputLED1 = %b | expected outputLED2 = %b | expected outputLED3 = %b | expected outputLED4 = %b | expected outputLED5 = %b | expected outputLED6 = %b | expected outputSignal = %b | ",outputLED1_expected_prev,outputLED2_expected_prev,outputLED3_expected_prev,outputLED4_expected_prev,outputLED5_expected_prev,outputLED6_expected_prev,outputSignal_expected_prev);
	$display("| real outputLED1 = %b | real outputLED2 = %b | real outputLED3 = %b | real outputLED4 = %b | real outputLED5 = %b | real outputLED6 = %b | real outputSignal = %b | ",outputLED1_prev,outputLED2_prev,outputLED3_prev,outputLED4_prev,outputLED5_prev,outputLED6_prev,outputSignal_prev);
`endif
	if (
		( outputLED1_expected_prev[0] !== 1'bx ) && ( outputLED1_prev[0] !== outputLED1_expected_prev[0] )
		&& ((outputLED1_expected_prev[0] !== last_outputLED1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[0] = outputLED1_expected_prev[0];
	end
	if (
		( outputLED1_expected_prev[1] !== 1'bx ) && ( outputLED1_prev[1] !== outputLED1_expected_prev[1] )
		&& ((outputLED1_expected_prev[1] !== last_outputLED1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[1] = outputLED1_expected_prev[1];
	end
	if (
		( outputLED1_expected_prev[2] !== 1'bx ) && ( outputLED1_prev[2] !== outputLED1_expected_prev[2] )
		&& ((outputLED1_expected_prev[2] !== last_outputLED1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[2] = outputLED1_expected_prev[2];
	end
	if (
		( outputLED1_expected_prev[3] !== 1'bx ) && ( outputLED1_prev[3] !== outputLED1_expected_prev[3] )
		&& ((outputLED1_expected_prev[3] !== last_outputLED1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[3] = outputLED1_expected_prev[3];
	end
	if (
		( outputLED2_expected_prev[0] !== 1'bx ) && ( outputLED2_prev[0] !== outputLED2_expected_prev[0] )
		&& ((outputLED2_expected_prev[0] !== last_outputLED2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[0] = outputLED2_expected_prev[0];
	end
	if (
		( outputLED2_expected_prev[1] !== 1'bx ) && ( outputLED2_prev[1] !== outputLED2_expected_prev[1] )
		&& ((outputLED2_expected_prev[1] !== last_outputLED2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[1] = outputLED2_expected_prev[1];
	end
	if (
		( outputLED2_expected_prev[2] !== 1'bx ) && ( outputLED2_prev[2] !== outputLED2_expected_prev[2] )
		&& ((outputLED2_expected_prev[2] !== last_outputLED2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[2] = outputLED2_expected_prev[2];
	end
	if (
		( outputLED2_expected_prev[3] !== 1'bx ) && ( outputLED2_prev[3] !== outputLED2_expected_prev[3] )
		&& ((outputLED2_expected_prev[3] !== last_outputLED2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[3] = outputLED2_expected_prev[3];
	end
	if (
		( outputLED3_expected_prev[0] !== 1'bx ) && ( outputLED3_prev[0] !== outputLED3_expected_prev[0] )
		&& ((outputLED3_expected_prev[0] !== last_outputLED3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[0] = outputLED3_expected_prev[0];
	end
	if (
		( outputLED3_expected_prev[1] !== 1'bx ) && ( outputLED3_prev[1] !== outputLED3_expected_prev[1] )
		&& ((outputLED3_expected_prev[1] !== last_outputLED3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[1] = outputLED3_expected_prev[1];
	end
	if (
		( outputLED3_expected_prev[2] !== 1'bx ) && ( outputLED3_prev[2] !== outputLED3_expected_prev[2] )
		&& ((outputLED3_expected_prev[2] !== last_outputLED3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[2] = outputLED3_expected_prev[2];
	end
	if (
		( outputLED3_expected_prev[3] !== 1'bx ) && ( outputLED3_prev[3] !== outputLED3_expected_prev[3] )
		&& ((outputLED3_expected_prev[3] !== last_outputLED3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[3] = outputLED3_expected_prev[3];
	end
	if (
		( outputLED4_expected_prev[0] !== 1'bx ) && ( outputLED4_prev[0] !== outputLED4_expected_prev[0] )
		&& ((outputLED4_expected_prev[0] !== last_outputLED4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[0] = outputLED4_expected_prev[0];
	end
	if (
		( outputLED4_expected_prev[1] !== 1'bx ) && ( outputLED4_prev[1] !== outputLED4_expected_prev[1] )
		&& ((outputLED4_expected_prev[1] !== last_outputLED4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[1] = outputLED4_expected_prev[1];
	end
	if (
		( outputLED4_expected_prev[2] !== 1'bx ) && ( outputLED4_prev[2] !== outputLED4_expected_prev[2] )
		&& ((outputLED4_expected_prev[2] !== last_outputLED4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[2] = outputLED4_expected_prev[2];
	end
	if (
		( outputLED4_expected_prev[3] !== 1'bx ) && ( outputLED4_prev[3] !== outputLED4_expected_prev[3] )
		&& ((outputLED4_expected_prev[3] !== last_outputLED4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[3] = outputLED4_expected_prev[3];
	end
	if (
		( outputLED5_expected_prev[0] !== 1'bx ) && ( outputLED5_prev[0] !== outputLED5_expected_prev[0] )
		&& ((outputLED5_expected_prev[0] !== last_outputLED5_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[0] = outputLED5_expected_prev[0];
	end
	if (
		( outputLED5_expected_prev[1] !== 1'bx ) && ( outputLED5_prev[1] !== outputLED5_expected_prev[1] )
		&& ((outputLED5_expected_prev[1] !== last_outputLED5_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[1] = outputLED5_expected_prev[1];
	end
	if (
		( outputLED5_expected_prev[2] !== 1'bx ) && ( outputLED5_prev[2] !== outputLED5_expected_prev[2] )
		&& ((outputLED5_expected_prev[2] !== last_outputLED5_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[2] = outputLED5_expected_prev[2];
	end
	if (
		( outputLED5_expected_prev[3] !== 1'bx ) && ( outputLED5_prev[3] !== outputLED5_expected_prev[3] )
		&& ((outputLED5_expected_prev[3] !== last_outputLED5_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[3] = outputLED5_expected_prev[3];
	end
	if (
		( outputLED6_expected_prev[0] !== 1'bx ) && ( outputLED6_prev[0] !== outputLED6_expected_prev[0] )
		&& ((outputLED6_expected_prev[0] !== last_outputLED6_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[0] = outputLED6_expected_prev[0];
	end
	if (
		( outputLED6_expected_prev[1] !== 1'bx ) && ( outputLED6_prev[1] !== outputLED6_expected_prev[1] )
		&& ((outputLED6_expected_prev[1] !== last_outputLED6_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[1] = outputLED6_expected_prev[1];
	end
	if (
		( outputLED6_expected_prev[2] !== 1'bx ) && ( outputLED6_prev[2] !== outputLED6_expected_prev[2] )
		&& ((outputLED6_expected_prev[2] !== last_outputLED6_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[2] = outputLED6_expected_prev[2];
	end
	if (
		( outputLED6_expected_prev[3] !== 1'bx ) && ( outputLED6_prev[3] !== outputLED6_expected_prev[3] )
		&& ((outputLED6_expected_prev[3] !== last_outputLED6_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[3] = outputLED6_expected_prev[3];
	end
	if (
		( outputSignal_expected_prev !== 1'bx ) && ( outputSignal_prev !== outputSignal_expected_prev )
		&& ((outputSignal_expected_prev !== last_outputSignal_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputSignal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputSignal_expected_prev);
		$display ("     Real value = %b", outputSignal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outputSignal_exp = outputSignal_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Generator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] inputBinaryLevel;
// wires                                               
wire [3:0] outputLED1;
wire [3:0] outputLED2;
wire [3:0] outputLED3;
wire [3:0] outputLED4;
wire [3:0] outputLED5;
wire [3:0] outputLED6;
wire outputSignal;

wire sampler;                             

// assign statements (if any)                          
Generator i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.inputBinaryLevel(inputBinaryLevel),
	.outputLED1(outputLED1),
	.outputLED2(outputLED2),
	.outputLED3(outputLED3),
	.outputLED4(outputLED4),
	.outputLED5(outputLED5),
	.outputLED6(outputLED6),
	.outputSignal(outputSignal)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 
// inputBinaryLevel[ 9 ]
initial
begin
	inputBinaryLevel[9] = 1'b0;
	inputBinaryLevel[9] = #7120000 1'b1;
	inputBinaryLevel[9] = #2640000 1'b0;
end 
// inputBinaryLevel[ 8 ]
initial
begin
	inputBinaryLevel[8] = 1'b0;
	inputBinaryLevel[8] = #7120000 1'b1;
	inputBinaryLevel[8] = #2640000 1'b0;
end 
// inputBinaryLevel[ 7 ]
initial
begin
	inputBinaryLevel[7] = 1'b0;
	inputBinaryLevel[7] = #7120000 1'b1;
	inputBinaryLevel[7] = #2640000 1'b0;
end 
// inputBinaryLevel[ 6 ]
initial
begin
	inputBinaryLevel[6] = 1'b0;
	inputBinaryLevel[6] = #7120000 1'b1;
	inputBinaryLevel[6] = #2640000 1'b0;
end 
// inputBinaryLevel[ 5 ]
initial
begin
	inputBinaryLevel[5] = 1'b0;
	inputBinaryLevel[5] = #7120000 1'b1;
	inputBinaryLevel[5] = #2640000 1'b0;
end 
// inputBinaryLevel[ 4 ]
initial
begin
	inputBinaryLevel[4] = 1'b0;
	inputBinaryLevel[4] = #7120000 1'b1;
	inputBinaryLevel[4] = #2640000 1'b0;
end 
// inputBinaryLevel[ 3 ]
initial
begin
	inputBinaryLevel[3] = 1'b0;
	inputBinaryLevel[3] = #7120000 1'b1;
	inputBinaryLevel[3] = #2640000 1'b0;
end 
// inputBinaryLevel[ 2 ]
initial
begin
	inputBinaryLevel[2] = 1'b0;
	inputBinaryLevel[2] = #7120000 1'b1;
	inputBinaryLevel[2] = #2640000 1'b0;
end 
// inputBinaryLevel[ 1 ]
initial
begin
	inputBinaryLevel[1] = 1'b0;
	inputBinaryLevel[1] = #2320000 1'b1;
	inputBinaryLevel[1] = #3120000 1'b0;
	inputBinaryLevel[1] = #1680000 1'b1;
	inputBinaryLevel[1] = #2640000 1'b0;
end 
// inputBinaryLevel[ 0 ]
initial
begin
	inputBinaryLevel[0] = 1'b0;
	inputBinaryLevel[0] = #7120000 1'b1;
	inputBinaryLevel[0] = #2640000 1'b0;
end 

Generator_vlg_sample_tst tb_sample (
	.clk(clk),
	.inputBinaryLevel(inputBinaryLevel),
	.sampler_tx(sampler)
);

Generator_vlg_check_tst tb_out(
	.outputLED1(outputLED1),
	.outputLED2(outputLED2),
	.outputLED3(outputLED3),
	.outputLED4(outputLED4),
	.outputLED5(outputLED5),
	.outputLED6(outputLED6),
	.outputSignal(outputSignal),
	.sampler_rx(sampler)
);
endmodule

