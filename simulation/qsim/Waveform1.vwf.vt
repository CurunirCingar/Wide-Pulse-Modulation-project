// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/24/2016 22:13:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Generator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Generator_vlg_sample_tst(
	clk,
	inputBinaryLevel,
	sampler_tx
);
input  clk;
input [9:0] inputBinaryLevel;
output sampler_tx;

reg sample;
time current_time;
always @(clk or inputBinaryLevel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Generator_vlg_check_tst (
	outputLED1,
	outputLED2,
	outputLED3,
	outputLED4,
	outputLED5,
	outputLED6,
	outputSignal,
	sampler_rx
);
input [31:0] outputLED1;
input [31:0] outputLED2;
input [31:0] outputLED3;
input [31:0] outputLED4;
input [31:0] outputLED5;
input [31:0] outputLED6;
input  outputSignal;
input sampler_rx;

reg [31:0] outputLED1_expected;
reg [31:0] outputLED2_expected;
reg [31:0] outputLED3_expected;
reg [31:0] outputLED4_expected;
reg [31:0] outputLED5_expected;
reg [31:0] outputLED6_expected;
reg  outputSignal_expected;

reg [31:0] outputLED1_prev;
reg [31:0] outputLED2_prev;
reg [31:0] outputLED3_prev;
reg [31:0] outputLED4_prev;
reg [31:0] outputLED5_prev;
reg [31:0] outputLED6_prev;
reg  outputSignal_prev;

reg [31:0] outputLED1_expected_prev;
reg [31:0] outputLED2_expected_prev;
reg [31:0] outputLED3_expected_prev;
reg [31:0] outputLED4_expected_prev;
reg [31:0] outputLED5_expected_prev;
reg [31:0] outputLED6_expected_prev;
reg  outputSignal_expected_prev;

reg [31:0] last_outputLED1_exp;
reg [31:0] last_outputLED2_exp;
reg [31:0] last_outputLED3_exp;
reg [31:0] last_outputLED4_exp;
reg [31:0] last_outputLED5_exp;
reg [31:0] last_outputLED6_exp;
reg  last_outputSignal_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	outputLED1_prev = outputLED1;
	outputLED2_prev = outputLED2;
	outputLED3_prev = outputLED3;
	outputLED4_prev = outputLED4;
	outputLED5_prev = outputLED5;
	outputLED6_prev = outputLED6;
	outputSignal_prev = outputSignal;
end

// update expected /o prevs

always @(trigger)
begin
	outputLED1_expected_prev = outputLED1_expected;
	outputLED2_expected_prev = outputLED2_expected;
	outputLED3_expected_prev = outputLED3_expected;
	outputLED4_expected_prev = outputLED4_expected;
	outputLED5_expected_prev = outputLED5_expected;
	outputLED6_expected_prev = outputLED6_expected;
	outputSignal_expected_prev = outputSignal_expected;
end


// expected outputLED1[ 31 ]
initial
begin
	outputLED1_expected[31] = 1'bX;
end 
// expected outputLED1[ 30 ]
initial
begin
	outputLED1_expected[30] = 1'bX;
end 
// expected outputLED1[ 29 ]
initial
begin
	outputLED1_expected[29] = 1'bX;
end 
// expected outputLED1[ 28 ]
initial
begin
	outputLED1_expected[28] = 1'bX;
end 
// expected outputLED1[ 27 ]
initial
begin
	outputLED1_expected[27] = 1'bX;
end 
// expected outputLED1[ 26 ]
initial
begin
	outputLED1_expected[26] = 1'bX;
end 
// expected outputLED1[ 25 ]
initial
begin
	outputLED1_expected[25] = 1'bX;
end 
// expected outputLED1[ 24 ]
initial
begin
	outputLED1_expected[24] = 1'bX;
end 
// expected outputLED1[ 23 ]
initial
begin
	outputLED1_expected[23] = 1'bX;
end 
// expected outputLED1[ 22 ]
initial
begin
	outputLED1_expected[22] = 1'bX;
end 
// expected outputLED1[ 21 ]
initial
begin
	outputLED1_expected[21] = 1'bX;
end 
// expected outputLED1[ 20 ]
initial
begin
	outputLED1_expected[20] = 1'bX;
end 
// expected outputLED1[ 19 ]
initial
begin
	outputLED1_expected[19] = 1'bX;
end 
// expected outputLED1[ 18 ]
initial
begin
	outputLED1_expected[18] = 1'bX;
end 
// expected outputLED1[ 17 ]
initial
begin
	outputLED1_expected[17] = 1'bX;
end 
// expected outputLED1[ 16 ]
initial
begin
	outputLED1_expected[16] = 1'bX;
end 
// expected outputLED1[ 15 ]
initial
begin
	outputLED1_expected[15] = 1'bX;
end 
// expected outputLED1[ 14 ]
initial
begin
	outputLED1_expected[14] = 1'bX;
end 
// expected outputLED1[ 13 ]
initial
begin
	outputLED1_expected[13] = 1'bX;
end 
// expected outputLED1[ 12 ]
initial
begin
	outputLED1_expected[12] = 1'bX;
end 
// expected outputLED1[ 11 ]
initial
begin
	outputLED1_expected[11] = 1'bX;
end 
// expected outputLED1[ 10 ]
initial
begin
	outputLED1_expected[10] = 1'bX;
end 
// expected outputLED1[ 9 ]
initial
begin
	outputLED1_expected[9] = 1'bX;
end 
// expected outputLED1[ 8 ]
initial
begin
	outputLED1_expected[8] = 1'bX;
end 
// expected outputLED1[ 7 ]
initial
begin
	outputLED1_expected[7] = 1'bX;
end 
// expected outputLED1[ 6 ]
initial
begin
	outputLED1_expected[6] = 1'bX;
end 
// expected outputLED1[ 5 ]
initial
begin
	outputLED1_expected[5] = 1'bX;
end 
// expected outputLED1[ 4 ]
initial
begin
	outputLED1_expected[4] = 1'bX;
end 
// expected outputLED1[ 3 ]
initial
begin
	outputLED1_expected[3] = 1'bX;
end 
// expected outputLED1[ 2 ]
initial
begin
	outputLED1_expected[2] = 1'bX;
end 
// expected outputLED1[ 1 ]
initial
begin
	outputLED1_expected[1] = 1'bX;
end 
// expected outputLED1[ 0 ]
initial
begin
	outputLED1_expected[0] = 1'bX;
end 
// expected outputLED2[ 31 ]
initial
begin
	outputLED2_expected[31] = 1'bX;
end 
// expected outputLED2[ 30 ]
initial
begin
	outputLED2_expected[30] = 1'bX;
end 
// expected outputLED2[ 29 ]
initial
begin
	outputLED2_expected[29] = 1'bX;
end 
// expected outputLED2[ 28 ]
initial
begin
	outputLED2_expected[28] = 1'bX;
end 
// expected outputLED2[ 27 ]
initial
begin
	outputLED2_expected[27] = 1'bX;
end 
// expected outputLED2[ 26 ]
initial
begin
	outputLED2_expected[26] = 1'bX;
end 
// expected outputLED2[ 25 ]
initial
begin
	outputLED2_expected[25] = 1'bX;
end 
// expected outputLED2[ 24 ]
initial
begin
	outputLED2_expected[24] = 1'bX;
end 
// expected outputLED2[ 23 ]
initial
begin
	outputLED2_expected[23] = 1'bX;
end 
// expected outputLED2[ 22 ]
initial
begin
	outputLED2_expected[22] = 1'bX;
end 
// expected outputLED2[ 21 ]
initial
begin
	outputLED2_expected[21] = 1'bX;
end 
// expected outputLED2[ 20 ]
initial
begin
	outputLED2_expected[20] = 1'bX;
end 
// expected outputLED2[ 19 ]
initial
begin
	outputLED2_expected[19] = 1'bX;
end 
// expected outputLED2[ 18 ]
initial
begin
	outputLED2_expected[18] = 1'bX;
end 
// expected outputLED2[ 17 ]
initial
begin
	outputLED2_expected[17] = 1'bX;
end 
// expected outputLED2[ 16 ]
initial
begin
	outputLED2_expected[16] = 1'bX;
end 
// expected outputLED2[ 15 ]
initial
begin
	outputLED2_expected[15] = 1'bX;
end 
// expected outputLED2[ 14 ]
initial
begin
	outputLED2_expected[14] = 1'bX;
end 
// expected outputLED2[ 13 ]
initial
begin
	outputLED2_expected[13] = 1'bX;
end 
// expected outputLED2[ 12 ]
initial
begin
	outputLED2_expected[12] = 1'bX;
end 
// expected outputLED2[ 11 ]
initial
begin
	outputLED2_expected[11] = 1'bX;
end 
// expected outputLED2[ 10 ]
initial
begin
	outputLED2_expected[10] = 1'bX;
end 
// expected outputLED2[ 9 ]
initial
begin
	outputLED2_expected[9] = 1'bX;
end 
// expected outputLED2[ 8 ]
initial
begin
	outputLED2_expected[8] = 1'bX;
end 
// expected outputLED2[ 7 ]
initial
begin
	outputLED2_expected[7] = 1'bX;
end 
// expected outputLED2[ 6 ]
initial
begin
	outputLED2_expected[6] = 1'bX;
end 
// expected outputLED2[ 5 ]
initial
begin
	outputLED2_expected[5] = 1'bX;
end 
// expected outputLED2[ 4 ]
initial
begin
	outputLED2_expected[4] = 1'bX;
end 
// expected outputLED2[ 3 ]
initial
begin
	outputLED2_expected[3] = 1'bX;
end 
// expected outputLED2[ 2 ]
initial
begin
	outputLED2_expected[2] = 1'bX;
end 
// expected outputLED2[ 1 ]
initial
begin
	outputLED2_expected[1] = 1'bX;
end 
// expected outputLED2[ 0 ]
initial
begin
	outputLED2_expected[0] = 1'bX;
end 
// expected outputLED3[ 31 ]
initial
begin
	outputLED3_expected[31] = 1'bX;
end 
// expected outputLED3[ 30 ]
initial
begin
	outputLED3_expected[30] = 1'bX;
end 
// expected outputLED3[ 29 ]
initial
begin
	outputLED3_expected[29] = 1'bX;
end 
// expected outputLED3[ 28 ]
initial
begin
	outputLED3_expected[28] = 1'bX;
end 
// expected outputLED3[ 27 ]
initial
begin
	outputLED3_expected[27] = 1'bX;
end 
// expected outputLED3[ 26 ]
initial
begin
	outputLED3_expected[26] = 1'bX;
end 
// expected outputLED3[ 25 ]
initial
begin
	outputLED3_expected[25] = 1'bX;
end 
// expected outputLED3[ 24 ]
initial
begin
	outputLED3_expected[24] = 1'bX;
end 
// expected outputLED3[ 23 ]
initial
begin
	outputLED3_expected[23] = 1'bX;
end 
// expected outputLED3[ 22 ]
initial
begin
	outputLED3_expected[22] = 1'bX;
end 
// expected outputLED3[ 21 ]
initial
begin
	outputLED3_expected[21] = 1'bX;
end 
// expected outputLED3[ 20 ]
initial
begin
	outputLED3_expected[20] = 1'bX;
end 
// expected outputLED3[ 19 ]
initial
begin
	outputLED3_expected[19] = 1'bX;
end 
// expected outputLED3[ 18 ]
initial
begin
	outputLED3_expected[18] = 1'bX;
end 
// expected outputLED3[ 17 ]
initial
begin
	outputLED3_expected[17] = 1'bX;
end 
// expected outputLED3[ 16 ]
initial
begin
	outputLED3_expected[16] = 1'bX;
end 
// expected outputLED3[ 15 ]
initial
begin
	outputLED3_expected[15] = 1'bX;
end 
// expected outputLED3[ 14 ]
initial
begin
	outputLED3_expected[14] = 1'bX;
end 
// expected outputLED3[ 13 ]
initial
begin
	outputLED3_expected[13] = 1'bX;
end 
// expected outputLED3[ 12 ]
initial
begin
	outputLED3_expected[12] = 1'bX;
end 
// expected outputLED3[ 11 ]
initial
begin
	outputLED3_expected[11] = 1'bX;
end 
// expected outputLED3[ 10 ]
initial
begin
	outputLED3_expected[10] = 1'bX;
end 
// expected outputLED3[ 9 ]
initial
begin
	outputLED3_expected[9] = 1'bX;
end 
// expected outputLED3[ 8 ]
initial
begin
	outputLED3_expected[8] = 1'bX;
end 
// expected outputLED3[ 7 ]
initial
begin
	outputLED3_expected[7] = 1'bX;
end 
// expected outputLED3[ 6 ]
initial
begin
	outputLED3_expected[6] = 1'bX;
end 
// expected outputLED3[ 5 ]
initial
begin
	outputLED3_expected[5] = 1'bX;
end 
// expected outputLED3[ 4 ]
initial
begin
	outputLED3_expected[4] = 1'bX;
end 
// expected outputLED3[ 3 ]
initial
begin
	outputLED3_expected[3] = 1'bX;
end 
// expected outputLED3[ 2 ]
initial
begin
	outputLED3_expected[2] = 1'bX;
end 
// expected outputLED3[ 1 ]
initial
begin
	outputLED3_expected[1] = 1'bX;
end 
// expected outputLED3[ 0 ]
initial
begin
	outputLED3_expected[0] = 1'bX;
end 
// expected outputLED4[ 31 ]
initial
begin
	outputLED4_expected[31] = 1'bX;
end 
// expected outputLED4[ 30 ]
initial
begin
	outputLED4_expected[30] = 1'bX;
end 
// expected outputLED4[ 29 ]
initial
begin
	outputLED4_expected[29] = 1'bX;
end 
// expected outputLED4[ 28 ]
initial
begin
	outputLED4_expected[28] = 1'bX;
end 
// expected outputLED4[ 27 ]
initial
begin
	outputLED4_expected[27] = 1'bX;
end 
// expected outputLED4[ 26 ]
initial
begin
	outputLED4_expected[26] = 1'bX;
end 
// expected outputLED4[ 25 ]
initial
begin
	outputLED4_expected[25] = 1'bX;
end 
// expected outputLED4[ 24 ]
initial
begin
	outputLED4_expected[24] = 1'bX;
end 
// expected outputLED4[ 23 ]
initial
begin
	outputLED4_expected[23] = 1'bX;
end 
// expected outputLED4[ 22 ]
initial
begin
	outputLED4_expected[22] = 1'bX;
end 
// expected outputLED4[ 21 ]
initial
begin
	outputLED4_expected[21] = 1'bX;
end 
// expected outputLED4[ 20 ]
initial
begin
	outputLED4_expected[20] = 1'bX;
end 
// expected outputLED4[ 19 ]
initial
begin
	outputLED4_expected[19] = 1'bX;
end 
// expected outputLED4[ 18 ]
initial
begin
	outputLED4_expected[18] = 1'bX;
end 
// expected outputLED4[ 17 ]
initial
begin
	outputLED4_expected[17] = 1'bX;
end 
// expected outputLED4[ 16 ]
initial
begin
	outputLED4_expected[16] = 1'bX;
end 
// expected outputLED4[ 15 ]
initial
begin
	outputLED4_expected[15] = 1'bX;
end 
// expected outputLED4[ 14 ]
initial
begin
	outputLED4_expected[14] = 1'bX;
end 
// expected outputLED4[ 13 ]
initial
begin
	outputLED4_expected[13] = 1'bX;
end 
// expected outputLED4[ 12 ]
initial
begin
	outputLED4_expected[12] = 1'bX;
end 
// expected outputLED4[ 11 ]
initial
begin
	outputLED4_expected[11] = 1'bX;
end 
// expected outputLED4[ 10 ]
initial
begin
	outputLED4_expected[10] = 1'bX;
end 
// expected outputLED4[ 9 ]
initial
begin
	outputLED4_expected[9] = 1'bX;
end 
// expected outputLED4[ 8 ]
initial
begin
	outputLED4_expected[8] = 1'bX;
end 
// expected outputLED4[ 7 ]
initial
begin
	outputLED4_expected[7] = 1'bX;
end 
// expected outputLED4[ 6 ]
initial
begin
	outputLED4_expected[6] = 1'bX;
end 
// expected outputLED4[ 5 ]
initial
begin
	outputLED4_expected[5] = 1'bX;
end 
// expected outputLED4[ 4 ]
initial
begin
	outputLED4_expected[4] = 1'bX;
end 
// expected outputLED4[ 3 ]
initial
begin
	outputLED4_expected[3] = 1'bX;
end 
// expected outputLED4[ 2 ]
initial
begin
	outputLED4_expected[2] = 1'bX;
end 
// expected outputLED4[ 1 ]
initial
begin
	outputLED4_expected[1] = 1'bX;
end 
// expected outputLED4[ 0 ]
initial
begin
	outputLED4_expected[0] = 1'bX;
end 
// expected outputLED5[ 31 ]
initial
begin
	outputLED5_expected[31] = 1'bX;
end 
// expected outputLED5[ 30 ]
initial
begin
	outputLED5_expected[30] = 1'bX;
end 
// expected outputLED5[ 29 ]
initial
begin
	outputLED5_expected[29] = 1'bX;
end 
// expected outputLED5[ 28 ]
initial
begin
	outputLED5_expected[28] = 1'bX;
end 
// expected outputLED5[ 27 ]
initial
begin
	outputLED5_expected[27] = 1'bX;
end 
// expected outputLED5[ 26 ]
initial
begin
	outputLED5_expected[26] = 1'bX;
end 
// expected outputLED5[ 25 ]
initial
begin
	outputLED5_expected[25] = 1'bX;
end 
// expected outputLED5[ 24 ]
initial
begin
	outputLED5_expected[24] = 1'bX;
end 
// expected outputLED5[ 23 ]
initial
begin
	outputLED5_expected[23] = 1'bX;
end 
// expected outputLED5[ 22 ]
initial
begin
	outputLED5_expected[22] = 1'bX;
end 
// expected outputLED5[ 21 ]
initial
begin
	outputLED5_expected[21] = 1'bX;
end 
// expected outputLED5[ 20 ]
initial
begin
	outputLED5_expected[20] = 1'bX;
end 
// expected outputLED5[ 19 ]
initial
begin
	outputLED5_expected[19] = 1'bX;
end 
// expected outputLED5[ 18 ]
initial
begin
	outputLED5_expected[18] = 1'bX;
end 
// expected outputLED5[ 17 ]
initial
begin
	outputLED5_expected[17] = 1'bX;
end 
// expected outputLED5[ 16 ]
initial
begin
	outputLED5_expected[16] = 1'bX;
end 
// expected outputLED5[ 15 ]
initial
begin
	outputLED5_expected[15] = 1'bX;
end 
// expected outputLED5[ 14 ]
initial
begin
	outputLED5_expected[14] = 1'bX;
end 
// expected outputLED5[ 13 ]
initial
begin
	outputLED5_expected[13] = 1'bX;
end 
// expected outputLED5[ 12 ]
initial
begin
	outputLED5_expected[12] = 1'bX;
end 
// expected outputLED5[ 11 ]
initial
begin
	outputLED5_expected[11] = 1'bX;
end 
// expected outputLED5[ 10 ]
initial
begin
	outputLED5_expected[10] = 1'bX;
end 
// expected outputLED5[ 9 ]
initial
begin
	outputLED5_expected[9] = 1'bX;
end 
// expected outputLED5[ 8 ]
initial
begin
	outputLED5_expected[8] = 1'bX;
end 
// expected outputLED5[ 7 ]
initial
begin
	outputLED5_expected[7] = 1'bX;
end 
// expected outputLED5[ 6 ]
initial
begin
	outputLED5_expected[6] = 1'bX;
end 
// expected outputLED5[ 5 ]
initial
begin
	outputLED5_expected[5] = 1'bX;
end 
// expected outputLED5[ 4 ]
initial
begin
	outputLED5_expected[4] = 1'bX;
end 
// expected outputLED5[ 3 ]
initial
begin
	outputLED5_expected[3] = 1'bX;
end 
// expected outputLED5[ 2 ]
initial
begin
	outputLED5_expected[2] = 1'bX;
end 
// expected outputLED5[ 1 ]
initial
begin
	outputLED5_expected[1] = 1'bX;
end 
// expected outputLED5[ 0 ]
initial
begin
	outputLED5_expected[0] = 1'bX;
end 
// expected outputLED6[ 31 ]
initial
begin
	outputLED6_expected[31] = 1'bX;
end 
// expected outputLED6[ 30 ]
initial
begin
	outputLED6_expected[30] = 1'bX;
end 
// expected outputLED6[ 29 ]
initial
begin
	outputLED6_expected[29] = 1'bX;
end 
// expected outputLED6[ 28 ]
initial
begin
	outputLED6_expected[28] = 1'bX;
end 
// expected outputLED6[ 27 ]
initial
begin
	outputLED6_expected[27] = 1'bX;
end 
// expected outputLED6[ 26 ]
initial
begin
	outputLED6_expected[26] = 1'bX;
end 
// expected outputLED6[ 25 ]
initial
begin
	outputLED6_expected[25] = 1'bX;
end 
// expected outputLED6[ 24 ]
initial
begin
	outputLED6_expected[24] = 1'bX;
end 
// expected outputLED6[ 23 ]
initial
begin
	outputLED6_expected[23] = 1'bX;
end 
// expected outputLED6[ 22 ]
initial
begin
	outputLED6_expected[22] = 1'bX;
end 
// expected outputLED6[ 21 ]
initial
begin
	outputLED6_expected[21] = 1'bX;
end 
// expected outputLED6[ 20 ]
initial
begin
	outputLED6_expected[20] = 1'bX;
end 
// expected outputLED6[ 19 ]
initial
begin
	outputLED6_expected[19] = 1'bX;
end 
// expected outputLED6[ 18 ]
initial
begin
	outputLED6_expected[18] = 1'bX;
end 
// expected outputLED6[ 17 ]
initial
begin
	outputLED6_expected[17] = 1'bX;
end 
// expected outputLED6[ 16 ]
initial
begin
	outputLED6_expected[16] = 1'bX;
end 
// expected outputLED6[ 15 ]
initial
begin
	outputLED6_expected[15] = 1'bX;
end 
// expected outputLED6[ 14 ]
initial
begin
	outputLED6_expected[14] = 1'bX;
end 
// expected outputLED6[ 13 ]
initial
begin
	outputLED6_expected[13] = 1'bX;
end 
// expected outputLED6[ 12 ]
initial
begin
	outputLED6_expected[12] = 1'bX;
end 
// expected outputLED6[ 11 ]
initial
begin
	outputLED6_expected[11] = 1'bX;
end 
// expected outputLED6[ 10 ]
initial
begin
	outputLED6_expected[10] = 1'bX;
end 
// expected outputLED6[ 9 ]
initial
begin
	outputLED6_expected[9] = 1'bX;
end 
// expected outputLED6[ 8 ]
initial
begin
	outputLED6_expected[8] = 1'bX;
end 
// expected outputLED6[ 7 ]
initial
begin
	outputLED6_expected[7] = 1'bX;
end 
// expected outputLED6[ 6 ]
initial
begin
	outputLED6_expected[6] = 1'bX;
end 
// expected outputLED6[ 5 ]
initial
begin
	outputLED6_expected[5] = 1'bX;
end 
// expected outputLED6[ 4 ]
initial
begin
	outputLED6_expected[4] = 1'bX;
end 
// expected outputLED6[ 3 ]
initial
begin
	outputLED6_expected[3] = 1'bX;
end 
// expected outputLED6[ 2 ]
initial
begin
	outputLED6_expected[2] = 1'bX;
end 
// expected outputLED6[ 1 ]
initial
begin
	outputLED6_expected[1] = 1'bX;
end 
// expected outputLED6[ 0 ]
initial
begin
	outputLED6_expected[0] = 1'bX;
end 

// expected outputSignal
initial
begin
	outputSignal_expected = 1'bX;
end 
// generate trigger
always @(outputLED1_expected or outputLED1 or outputLED2_expected or outputLED2 or outputLED3_expected or outputLED3 or outputLED4_expected or outputLED4 or outputLED5_expected or outputLED5 or outputLED6_expected or outputLED6 or outputSignal_expected or outputSignal)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outputLED1 = %b | expected outputLED2 = %b | expected outputLED3 = %b | expected outputLED4 = %b | expected outputLED5 = %b | expected outputLED6 = %b | expected outputSignal = %b | ",outputLED1_expected_prev,outputLED2_expected_prev,outputLED3_expected_prev,outputLED4_expected_prev,outputLED5_expected_prev,outputLED6_expected_prev,outputSignal_expected_prev);
	$display("| real outputLED1 = %b | real outputLED2 = %b | real outputLED3 = %b | real outputLED4 = %b | real outputLED5 = %b | real outputLED6 = %b | real outputSignal = %b | ",outputLED1_prev,outputLED2_prev,outputLED3_prev,outputLED4_prev,outputLED5_prev,outputLED6_prev,outputSignal_prev);
`endif
	if (
		( outputLED1_expected_prev[0] !== 1'bx ) && ( outputLED1_prev[0] !== outputLED1_expected_prev[0] )
		&& ((outputLED1_expected_prev[0] !== last_outputLED1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[0] = outputLED1_expected_prev[0];
	end
	if (
		( outputLED1_expected_prev[1] !== 1'bx ) && ( outputLED1_prev[1] !== outputLED1_expected_prev[1] )
		&& ((outputLED1_expected_prev[1] !== last_outputLED1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[1] = outputLED1_expected_prev[1];
	end
	if (
		( outputLED1_expected_prev[2] !== 1'bx ) && ( outputLED1_prev[2] !== outputLED1_expected_prev[2] )
		&& ((outputLED1_expected_prev[2] !== last_outputLED1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[2] = outputLED1_expected_prev[2];
	end
	if (
		( outputLED1_expected_prev[3] !== 1'bx ) && ( outputLED1_prev[3] !== outputLED1_expected_prev[3] )
		&& ((outputLED1_expected_prev[3] !== last_outputLED1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[3] = outputLED1_expected_prev[3];
	end
	if (
		( outputLED1_expected_prev[4] !== 1'bx ) && ( outputLED1_prev[4] !== outputLED1_expected_prev[4] )
		&& ((outputLED1_expected_prev[4] !== last_outputLED1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[4] = outputLED1_expected_prev[4];
	end
	if (
		( outputLED1_expected_prev[5] !== 1'bx ) && ( outputLED1_prev[5] !== outputLED1_expected_prev[5] )
		&& ((outputLED1_expected_prev[5] !== last_outputLED1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[5] = outputLED1_expected_prev[5];
	end
	if (
		( outputLED1_expected_prev[6] !== 1'bx ) && ( outputLED1_prev[6] !== outputLED1_expected_prev[6] )
		&& ((outputLED1_expected_prev[6] !== last_outputLED1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[6] = outputLED1_expected_prev[6];
	end
	if (
		( outputLED1_expected_prev[7] !== 1'bx ) && ( outputLED1_prev[7] !== outputLED1_expected_prev[7] )
		&& ((outputLED1_expected_prev[7] !== last_outputLED1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[7] = outputLED1_expected_prev[7];
	end
	if (
		( outputLED1_expected_prev[8] !== 1'bx ) && ( outputLED1_prev[8] !== outputLED1_expected_prev[8] )
		&& ((outputLED1_expected_prev[8] !== last_outputLED1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[8] = outputLED1_expected_prev[8];
	end
	if (
		( outputLED1_expected_prev[9] !== 1'bx ) && ( outputLED1_prev[9] !== outputLED1_expected_prev[9] )
		&& ((outputLED1_expected_prev[9] !== last_outputLED1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[9] = outputLED1_expected_prev[9];
	end
	if (
		( outputLED1_expected_prev[10] !== 1'bx ) && ( outputLED1_prev[10] !== outputLED1_expected_prev[10] )
		&& ((outputLED1_expected_prev[10] !== last_outputLED1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[10] = outputLED1_expected_prev[10];
	end
	if (
		( outputLED1_expected_prev[11] !== 1'bx ) && ( outputLED1_prev[11] !== outputLED1_expected_prev[11] )
		&& ((outputLED1_expected_prev[11] !== last_outputLED1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[11] = outputLED1_expected_prev[11];
	end
	if (
		( outputLED1_expected_prev[12] !== 1'bx ) && ( outputLED1_prev[12] !== outputLED1_expected_prev[12] )
		&& ((outputLED1_expected_prev[12] !== last_outputLED1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[12] = outputLED1_expected_prev[12];
	end
	if (
		( outputLED1_expected_prev[13] !== 1'bx ) && ( outputLED1_prev[13] !== outputLED1_expected_prev[13] )
		&& ((outputLED1_expected_prev[13] !== last_outputLED1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[13] = outputLED1_expected_prev[13];
	end
	if (
		( outputLED1_expected_prev[14] !== 1'bx ) && ( outputLED1_prev[14] !== outputLED1_expected_prev[14] )
		&& ((outputLED1_expected_prev[14] !== last_outputLED1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[14] = outputLED1_expected_prev[14];
	end
	if (
		( outputLED1_expected_prev[15] !== 1'bx ) && ( outputLED1_prev[15] !== outputLED1_expected_prev[15] )
		&& ((outputLED1_expected_prev[15] !== last_outputLED1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[15] = outputLED1_expected_prev[15];
	end
	if (
		( outputLED1_expected_prev[16] !== 1'bx ) && ( outputLED1_prev[16] !== outputLED1_expected_prev[16] )
		&& ((outputLED1_expected_prev[16] !== last_outputLED1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[16] = outputLED1_expected_prev[16];
	end
	if (
		( outputLED1_expected_prev[17] !== 1'bx ) && ( outputLED1_prev[17] !== outputLED1_expected_prev[17] )
		&& ((outputLED1_expected_prev[17] !== last_outputLED1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[17] = outputLED1_expected_prev[17];
	end
	if (
		( outputLED1_expected_prev[18] !== 1'bx ) && ( outputLED1_prev[18] !== outputLED1_expected_prev[18] )
		&& ((outputLED1_expected_prev[18] !== last_outputLED1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[18] = outputLED1_expected_prev[18];
	end
	if (
		( outputLED1_expected_prev[19] !== 1'bx ) && ( outputLED1_prev[19] !== outputLED1_expected_prev[19] )
		&& ((outputLED1_expected_prev[19] !== last_outputLED1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[19] = outputLED1_expected_prev[19];
	end
	if (
		( outputLED1_expected_prev[20] !== 1'bx ) && ( outputLED1_prev[20] !== outputLED1_expected_prev[20] )
		&& ((outputLED1_expected_prev[20] !== last_outputLED1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[20] = outputLED1_expected_prev[20];
	end
	if (
		( outputLED1_expected_prev[21] !== 1'bx ) && ( outputLED1_prev[21] !== outputLED1_expected_prev[21] )
		&& ((outputLED1_expected_prev[21] !== last_outputLED1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[21] = outputLED1_expected_prev[21];
	end
	if (
		( outputLED1_expected_prev[22] !== 1'bx ) && ( outputLED1_prev[22] !== outputLED1_expected_prev[22] )
		&& ((outputLED1_expected_prev[22] !== last_outputLED1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[22] = outputLED1_expected_prev[22];
	end
	if (
		( outputLED1_expected_prev[23] !== 1'bx ) && ( outputLED1_prev[23] !== outputLED1_expected_prev[23] )
		&& ((outputLED1_expected_prev[23] !== last_outputLED1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[23] = outputLED1_expected_prev[23];
	end
	if (
		( outputLED1_expected_prev[24] !== 1'bx ) && ( outputLED1_prev[24] !== outputLED1_expected_prev[24] )
		&& ((outputLED1_expected_prev[24] !== last_outputLED1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[24] = outputLED1_expected_prev[24];
	end
	if (
		( outputLED1_expected_prev[25] !== 1'bx ) && ( outputLED1_prev[25] !== outputLED1_expected_prev[25] )
		&& ((outputLED1_expected_prev[25] !== last_outputLED1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[25] = outputLED1_expected_prev[25];
	end
	if (
		( outputLED1_expected_prev[26] !== 1'bx ) && ( outputLED1_prev[26] !== outputLED1_expected_prev[26] )
		&& ((outputLED1_expected_prev[26] !== last_outputLED1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[26] = outputLED1_expected_prev[26];
	end
	if (
		( outputLED1_expected_prev[27] !== 1'bx ) && ( outputLED1_prev[27] !== outputLED1_expected_prev[27] )
		&& ((outputLED1_expected_prev[27] !== last_outputLED1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[27] = outputLED1_expected_prev[27];
	end
	if (
		( outputLED1_expected_prev[28] !== 1'bx ) && ( outputLED1_prev[28] !== outputLED1_expected_prev[28] )
		&& ((outputLED1_expected_prev[28] !== last_outputLED1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[28] = outputLED1_expected_prev[28];
	end
	if (
		( outputLED1_expected_prev[29] !== 1'bx ) && ( outputLED1_prev[29] !== outputLED1_expected_prev[29] )
		&& ((outputLED1_expected_prev[29] !== last_outputLED1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[29] = outputLED1_expected_prev[29];
	end
	if (
		( outputLED1_expected_prev[30] !== 1'bx ) && ( outputLED1_prev[30] !== outputLED1_expected_prev[30] )
		&& ((outputLED1_expected_prev[30] !== last_outputLED1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[30] = outputLED1_expected_prev[30];
	end
	if (
		( outputLED1_expected_prev[31] !== 1'bx ) && ( outputLED1_prev[31] !== outputLED1_expected_prev[31] )
		&& ((outputLED1_expected_prev[31] !== last_outputLED1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED1_expected_prev);
		$display ("     Real value = %b", outputLED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outputLED1_exp[31] = outputLED1_expected_prev[31];
	end
	if (
		( outputLED2_expected_prev[0] !== 1'bx ) && ( outputLED2_prev[0] !== outputLED2_expected_prev[0] )
		&& ((outputLED2_expected_prev[0] !== last_outputLED2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[0] = outputLED2_expected_prev[0];
	end
	if (
		( outputLED2_expected_prev[1] !== 1'bx ) && ( outputLED2_prev[1] !== outputLED2_expected_prev[1] )
		&& ((outputLED2_expected_prev[1] !== last_outputLED2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[1] = outputLED2_expected_prev[1];
	end
	if (
		( outputLED2_expected_prev[2] !== 1'bx ) && ( outputLED2_prev[2] !== outputLED2_expected_prev[2] )
		&& ((outputLED2_expected_prev[2] !== last_outputLED2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[2] = outputLED2_expected_prev[2];
	end
	if (
		( outputLED2_expected_prev[3] !== 1'bx ) && ( outputLED2_prev[3] !== outputLED2_expected_prev[3] )
		&& ((outputLED2_expected_prev[3] !== last_outputLED2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[3] = outputLED2_expected_prev[3];
	end
	if (
		( outputLED2_expected_prev[4] !== 1'bx ) && ( outputLED2_prev[4] !== outputLED2_expected_prev[4] )
		&& ((outputLED2_expected_prev[4] !== last_outputLED2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[4] = outputLED2_expected_prev[4];
	end
	if (
		( outputLED2_expected_prev[5] !== 1'bx ) && ( outputLED2_prev[5] !== outputLED2_expected_prev[5] )
		&& ((outputLED2_expected_prev[5] !== last_outputLED2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[5] = outputLED2_expected_prev[5];
	end
	if (
		( outputLED2_expected_prev[6] !== 1'bx ) && ( outputLED2_prev[6] !== outputLED2_expected_prev[6] )
		&& ((outputLED2_expected_prev[6] !== last_outputLED2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[6] = outputLED2_expected_prev[6];
	end
	if (
		( outputLED2_expected_prev[7] !== 1'bx ) && ( outputLED2_prev[7] !== outputLED2_expected_prev[7] )
		&& ((outputLED2_expected_prev[7] !== last_outputLED2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[7] = outputLED2_expected_prev[7];
	end
	if (
		( outputLED2_expected_prev[8] !== 1'bx ) && ( outputLED2_prev[8] !== outputLED2_expected_prev[8] )
		&& ((outputLED2_expected_prev[8] !== last_outputLED2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[8] = outputLED2_expected_prev[8];
	end
	if (
		( outputLED2_expected_prev[9] !== 1'bx ) && ( outputLED2_prev[9] !== outputLED2_expected_prev[9] )
		&& ((outputLED2_expected_prev[9] !== last_outputLED2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[9] = outputLED2_expected_prev[9];
	end
	if (
		( outputLED2_expected_prev[10] !== 1'bx ) && ( outputLED2_prev[10] !== outputLED2_expected_prev[10] )
		&& ((outputLED2_expected_prev[10] !== last_outputLED2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[10] = outputLED2_expected_prev[10];
	end
	if (
		( outputLED2_expected_prev[11] !== 1'bx ) && ( outputLED2_prev[11] !== outputLED2_expected_prev[11] )
		&& ((outputLED2_expected_prev[11] !== last_outputLED2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[11] = outputLED2_expected_prev[11];
	end
	if (
		( outputLED2_expected_prev[12] !== 1'bx ) && ( outputLED2_prev[12] !== outputLED2_expected_prev[12] )
		&& ((outputLED2_expected_prev[12] !== last_outputLED2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[12] = outputLED2_expected_prev[12];
	end
	if (
		( outputLED2_expected_prev[13] !== 1'bx ) && ( outputLED2_prev[13] !== outputLED2_expected_prev[13] )
		&& ((outputLED2_expected_prev[13] !== last_outputLED2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[13] = outputLED2_expected_prev[13];
	end
	if (
		( outputLED2_expected_prev[14] !== 1'bx ) && ( outputLED2_prev[14] !== outputLED2_expected_prev[14] )
		&& ((outputLED2_expected_prev[14] !== last_outputLED2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[14] = outputLED2_expected_prev[14];
	end
	if (
		( outputLED2_expected_prev[15] !== 1'bx ) && ( outputLED2_prev[15] !== outputLED2_expected_prev[15] )
		&& ((outputLED2_expected_prev[15] !== last_outputLED2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[15] = outputLED2_expected_prev[15];
	end
	if (
		( outputLED2_expected_prev[16] !== 1'bx ) && ( outputLED2_prev[16] !== outputLED2_expected_prev[16] )
		&& ((outputLED2_expected_prev[16] !== last_outputLED2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[16] = outputLED2_expected_prev[16];
	end
	if (
		( outputLED2_expected_prev[17] !== 1'bx ) && ( outputLED2_prev[17] !== outputLED2_expected_prev[17] )
		&& ((outputLED2_expected_prev[17] !== last_outputLED2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[17] = outputLED2_expected_prev[17];
	end
	if (
		( outputLED2_expected_prev[18] !== 1'bx ) && ( outputLED2_prev[18] !== outputLED2_expected_prev[18] )
		&& ((outputLED2_expected_prev[18] !== last_outputLED2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[18] = outputLED2_expected_prev[18];
	end
	if (
		( outputLED2_expected_prev[19] !== 1'bx ) && ( outputLED2_prev[19] !== outputLED2_expected_prev[19] )
		&& ((outputLED2_expected_prev[19] !== last_outputLED2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[19] = outputLED2_expected_prev[19];
	end
	if (
		( outputLED2_expected_prev[20] !== 1'bx ) && ( outputLED2_prev[20] !== outputLED2_expected_prev[20] )
		&& ((outputLED2_expected_prev[20] !== last_outputLED2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[20] = outputLED2_expected_prev[20];
	end
	if (
		( outputLED2_expected_prev[21] !== 1'bx ) && ( outputLED2_prev[21] !== outputLED2_expected_prev[21] )
		&& ((outputLED2_expected_prev[21] !== last_outputLED2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[21] = outputLED2_expected_prev[21];
	end
	if (
		( outputLED2_expected_prev[22] !== 1'bx ) && ( outputLED2_prev[22] !== outputLED2_expected_prev[22] )
		&& ((outputLED2_expected_prev[22] !== last_outputLED2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[22] = outputLED2_expected_prev[22];
	end
	if (
		( outputLED2_expected_prev[23] !== 1'bx ) && ( outputLED2_prev[23] !== outputLED2_expected_prev[23] )
		&& ((outputLED2_expected_prev[23] !== last_outputLED2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[23] = outputLED2_expected_prev[23];
	end
	if (
		( outputLED2_expected_prev[24] !== 1'bx ) && ( outputLED2_prev[24] !== outputLED2_expected_prev[24] )
		&& ((outputLED2_expected_prev[24] !== last_outputLED2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[24] = outputLED2_expected_prev[24];
	end
	if (
		( outputLED2_expected_prev[25] !== 1'bx ) && ( outputLED2_prev[25] !== outputLED2_expected_prev[25] )
		&& ((outputLED2_expected_prev[25] !== last_outputLED2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[25] = outputLED2_expected_prev[25];
	end
	if (
		( outputLED2_expected_prev[26] !== 1'bx ) && ( outputLED2_prev[26] !== outputLED2_expected_prev[26] )
		&& ((outputLED2_expected_prev[26] !== last_outputLED2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[26] = outputLED2_expected_prev[26];
	end
	if (
		( outputLED2_expected_prev[27] !== 1'bx ) && ( outputLED2_prev[27] !== outputLED2_expected_prev[27] )
		&& ((outputLED2_expected_prev[27] !== last_outputLED2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[27] = outputLED2_expected_prev[27];
	end
	if (
		( outputLED2_expected_prev[28] !== 1'bx ) && ( outputLED2_prev[28] !== outputLED2_expected_prev[28] )
		&& ((outputLED2_expected_prev[28] !== last_outputLED2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[28] = outputLED2_expected_prev[28];
	end
	if (
		( outputLED2_expected_prev[29] !== 1'bx ) && ( outputLED2_prev[29] !== outputLED2_expected_prev[29] )
		&& ((outputLED2_expected_prev[29] !== last_outputLED2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[29] = outputLED2_expected_prev[29];
	end
	if (
		( outputLED2_expected_prev[30] !== 1'bx ) && ( outputLED2_prev[30] !== outputLED2_expected_prev[30] )
		&& ((outputLED2_expected_prev[30] !== last_outputLED2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[30] = outputLED2_expected_prev[30];
	end
	if (
		( outputLED2_expected_prev[31] !== 1'bx ) && ( outputLED2_prev[31] !== outputLED2_expected_prev[31] )
		&& ((outputLED2_expected_prev[31] !== last_outputLED2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED2_expected_prev);
		$display ("     Real value = %b", outputLED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLED2_exp[31] = outputLED2_expected_prev[31];
	end
	if (
		( outputLED3_expected_prev[0] !== 1'bx ) && ( outputLED3_prev[0] !== outputLED3_expected_prev[0] )
		&& ((outputLED3_expected_prev[0] !== last_outputLED3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[0] = outputLED3_expected_prev[0];
	end
	if (
		( outputLED3_expected_prev[1] !== 1'bx ) && ( outputLED3_prev[1] !== outputLED3_expected_prev[1] )
		&& ((outputLED3_expected_prev[1] !== last_outputLED3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[1] = outputLED3_expected_prev[1];
	end
	if (
		( outputLED3_expected_prev[2] !== 1'bx ) && ( outputLED3_prev[2] !== outputLED3_expected_prev[2] )
		&& ((outputLED3_expected_prev[2] !== last_outputLED3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[2] = outputLED3_expected_prev[2];
	end
	if (
		( outputLED3_expected_prev[3] !== 1'bx ) && ( outputLED3_prev[3] !== outputLED3_expected_prev[3] )
		&& ((outputLED3_expected_prev[3] !== last_outputLED3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[3] = outputLED3_expected_prev[3];
	end
	if (
		( outputLED3_expected_prev[4] !== 1'bx ) && ( outputLED3_prev[4] !== outputLED3_expected_prev[4] )
		&& ((outputLED3_expected_prev[4] !== last_outputLED3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[4] = outputLED3_expected_prev[4];
	end
	if (
		( outputLED3_expected_prev[5] !== 1'bx ) && ( outputLED3_prev[5] !== outputLED3_expected_prev[5] )
		&& ((outputLED3_expected_prev[5] !== last_outputLED3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[5] = outputLED3_expected_prev[5];
	end
	if (
		( outputLED3_expected_prev[6] !== 1'bx ) && ( outputLED3_prev[6] !== outputLED3_expected_prev[6] )
		&& ((outputLED3_expected_prev[6] !== last_outputLED3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[6] = outputLED3_expected_prev[6];
	end
	if (
		( outputLED3_expected_prev[7] !== 1'bx ) && ( outputLED3_prev[7] !== outputLED3_expected_prev[7] )
		&& ((outputLED3_expected_prev[7] !== last_outputLED3_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[7] = outputLED3_expected_prev[7];
	end
	if (
		( outputLED3_expected_prev[8] !== 1'bx ) && ( outputLED3_prev[8] !== outputLED3_expected_prev[8] )
		&& ((outputLED3_expected_prev[8] !== last_outputLED3_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[8] = outputLED3_expected_prev[8];
	end
	if (
		( outputLED3_expected_prev[9] !== 1'bx ) && ( outputLED3_prev[9] !== outputLED3_expected_prev[9] )
		&& ((outputLED3_expected_prev[9] !== last_outputLED3_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[9] = outputLED3_expected_prev[9];
	end
	if (
		( outputLED3_expected_prev[10] !== 1'bx ) && ( outputLED3_prev[10] !== outputLED3_expected_prev[10] )
		&& ((outputLED3_expected_prev[10] !== last_outputLED3_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[10] = outputLED3_expected_prev[10];
	end
	if (
		( outputLED3_expected_prev[11] !== 1'bx ) && ( outputLED3_prev[11] !== outputLED3_expected_prev[11] )
		&& ((outputLED3_expected_prev[11] !== last_outputLED3_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[11] = outputLED3_expected_prev[11];
	end
	if (
		( outputLED3_expected_prev[12] !== 1'bx ) && ( outputLED3_prev[12] !== outputLED3_expected_prev[12] )
		&& ((outputLED3_expected_prev[12] !== last_outputLED3_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[12] = outputLED3_expected_prev[12];
	end
	if (
		( outputLED3_expected_prev[13] !== 1'bx ) && ( outputLED3_prev[13] !== outputLED3_expected_prev[13] )
		&& ((outputLED3_expected_prev[13] !== last_outputLED3_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[13] = outputLED3_expected_prev[13];
	end
	if (
		( outputLED3_expected_prev[14] !== 1'bx ) && ( outputLED3_prev[14] !== outputLED3_expected_prev[14] )
		&& ((outputLED3_expected_prev[14] !== last_outputLED3_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[14] = outputLED3_expected_prev[14];
	end
	if (
		( outputLED3_expected_prev[15] !== 1'bx ) && ( outputLED3_prev[15] !== outputLED3_expected_prev[15] )
		&& ((outputLED3_expected_prev[15] !== last_outputLED3_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[15] = outputLED3_expected_prev[15];
	end
	if (
		( outputLED3_expected_prev[16] !== 1'bx ) && ( outputLED3_prev[16] !== outputLED3_expected_prev[16] )
		&& ((outputLED3_expected_prev[16] !== last_outputLED3_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[16] = outputLED3_expected_prev[16];
	end
	if (
		( outputLED3_expected_prev[17] !== 1'bx ) && ( outputLED3_prev[17] !== outputLED3_expected_prev[17] )
		&& ((outputLED3_expected_prev[17] !== last_outputLED3_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[17] = outputLED3_expected_prev[17];
	end
	if (
		( outputLED3_expected_prev[18] !== 1'bx ) && ( outputLED3_prev[18] !== outputLED3_expected_prev[18] )
		&& ((outputLED3_expected_prev[18] !== last_outputLED3_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[18] = outputLED3_expected_prev[18];
	end
	if (
		( outputLED3_expected_prev[19] !== 1'bx ) && ( outputLED3_prev[19] !== outputLED3_expected_prev[19] )
		&& ((outputLED3_expected_prev[19] !== last_outputLED3_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[19] = outputLED3_expected_prev[19];
	end
	if (
		( outputLED3_expected_prev[20] !== 1'bx ) && ( outputLED3_prev[20] !== outputLED3_expected_prev[20] )
		&& ((outputLED3_expected_prev[20] !== last_outputLED3_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[20] = outputLED3_expected_prev[20];
	end
	if (
		( outputLED3_expected_prev[21] !== 1'bx ) && ( outputLED3_prev[21] !== outputLED3_expected_prev[21] )
		&& ((outputLED3_expected_prev[21] !== last_outputLED3_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[21] = outputLED3_expected_prev[21];
	end
	if (
		( outputLED3_expected_prev[22] !== 1'bx ) && ( outputLED3_prev[22] !== outputLED3_expected_prev[22] )
		&& ((outputLED3_expected_prev[22] !== last_outputLED3_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[22] = outputLED3_expected_prev[22];
	end
	if (
		( outputLED3_expected_prev[23] !== 1'bx ) && ( outputLED3_prev[23] !== outputLED3_expected_prev[23] )
		&& ((outputLED3_expected_prev[23] !== last_outputLED3_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[23] = outputLED3_expected_prev[23];
	end
	if (
		( outputLED3_expected_prev[24] !== 1'bx ) && ( outputLED3_prev[24] !== outputLED3_expected_prev[24] )
		&& ((outputLED3_expected_prev[24] !== last_outputLED3_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[24] = outputLED3_expected_prev[24];
	end
	if (
		( outputLED3_expected_prev[25] !== 1'bx ) && ( outputLED3_prev[25] !== outputLED3_expected_prev[25] )
		&& ((outputLED3_expected_prev[25] !== last_outputLED3_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[25] = outputLED3_expected_prev[25];
	end
	if (
		( outputLED3_expected_prev[26] !== 1'bx ) && ( outputLED3_prev[26] !== outputLED3_expected_prev[26] )
		&& ((outputLED3_expected_prev[26] !== last_outputLED3_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[26] = outputLED3_expected_prev[26];
	end
	if (
		( outputLED3_expected_prev[27] !== 1'bx ) && ( outputLED3_prev[27] !== outputLED3_expected_prev[27] )
		&& ((outputLED3_expected_prev[27] !== last_outputLED3_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[27] = outputLED3_expected_prev[27];
	end
	if (
		( outputLED3_expected_prev[28] !== 1'bx ) && ( outputLED3_prev[28] !== outputLED3_expected_prev[28] )
		&& ((outputLED3_expected_prev[28] !== last_outputLED3_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[28] = outputLED3_expected_prev[28];
	end
	if (
		( outputLED3_expected_prev[29] !== 1'bx ) && ( outputLED3_prev[29] !== outputLED3_expected_prev[29] )
		&& ((outputLED3_expected_prev[29] !== last_outputLED3_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[29] = outputLED3_expected_prev[29];
	end
	if (
		( outputLED3_expected_prev[30] !== 1'bx ) && ( outputLED3_prev[30] !== outputLED3_expected_prev[30] )
		&& ((outputLED3_expected_prev[30] !== last_outputLED3_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[30] = outputLED3_expected_prev[30];
	end
	if (
		( outputLED3_expected_prev[31] !== 1'bx ) && ( outputLED3_prev[31] !== outputLED3_expected_prev[31] )
		&& ((outputLED3_expected_prev[31] !== last_outputLED3_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED3_expected_prev);
		$display ("     Real value = %b", outputLED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputLED3_exp[31] = outputLED3_expected_prev[31];
	end
	if (
		( outputLED4_expected_prev[0] !== 1'bx ) && ( outputLED4_prev[0] !== outputLED4_expected_prev[0] )
		&& ((outputLED4_expected_prev[0] !== last_outputLED4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[0] = outputLED4_expected_prev[0];
	end
	if (
		( outputLED4_expected_prev[1] !== 1'bx ) && ( outputLED4_prev[1] !== outputLED4_expected_prev[1] )
		&& ((outputLED4_expected_prev[1] !== last_outputLED4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[1] = outputLED4_expected_prev[1];
	end
	if (
		( outputLED4_expected_prev[2] !== 1'bx ) && ( outputLED4_prev[2] !== outputLED4_expected_prev[2] )
		&& ((outputLED4_expected_prev[2] !== last_outputLED4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[2] = outputLED4_expected_prev[2];
	end
	if (
		( outputLED4_expected_prev[3] !== 1'bx ) && ( outputLED4_prev[3] !== outputLED4_expected_prev[3] )
		&& ((outputLED4_expected_prev[3] !== last_outputLED4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[3] = outputLED4_expected_prev[3];
	end
	if (
		( outputLED4_expected_prev[4] !== 1'bx ) && ( outputLED4_prev[4] !== outputLED4_expected_prev[4] )
		&& ((outputLED4_expected_prev[4] !== last_outputLED4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[4] = outputLED4_expected_prev[4];
	end
	if (
		( outputLED4_expected_prev[5] !== 1'bx ) && ( outputLED4_prev[5] !== outputLED4_expected_prev[5] )
		&& ((outputLED4_expected_prev[5] !== last_outputLED4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[5] = outputLED4_expected_prev[5];
	end
	if (
		( outputLED4_expected_prev[6] !== 1'bx ) && ( outputLED4_prev[6] !== outputLED4_expected_prev[6] )
		&& ((outputLED4_expected_prev[6] !== last_outputLED4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[6] = outputLED4_expected_prev[6];
	end
	if (
		( outputLED4_expected_prev[7] !== 1'bx ) && ( outputLED4_prev[7] !== outputLED4_expected_prev[7] )
		&& ((outputLED4_expected_prev[7] !== last_outputLED4_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[7] = outputLED4_expected_prev[7];
	end
	if (
		( outputLED4_expected_prev[8] !== 1'bx ) && ( outputLED4_prev[8] !== outputLED4_expected_prev[8] )
		&& ((outputLED4_expected_prev[8] !== last_outputLED4_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[8] = outputLED4_expected_prev[8];
	end
	if (
		( outputLED4_expected_prev[9] !== 1'bx ) && ( outputLED4_prev[9] !== outputLED4_expected_prev[9] )
		&& ((outputLED4_expected_prev[9] !== last_outputLED4_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[9] = outputLED4_expected_prev[9];
	end
	if (
		( outputLED4_expected_prev[10] !== 1'bx ) && ( outputLED4_prev[10] !== outputLED4_expected_prev[10] )
		&& ((outputLED4_expected_prev[10] !== last_outputLED4_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[10] = outputLED4_expected_prev[10];
	end
	if (
		( outputLED4_expected_prev[11] !== 1'bx ) && ( outputLED4_prev[11] !== outputLED4_expected_prev[11] )
		&& ((outputLED4_expected_prev[11] !== last_outputLED4_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[11] = outputLED4_expected_prev[11];
	end
	if (
		( outputLED4_expected_prev[12] !== 1'bx ) && ( outputLED4_prev[12] !== outputLED4_expected_prev[12] )
		&& ((outputLED4_expected_prev[12] !== last_outputLED4_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[12] = outputLED4_expected_prev[12];
	end
	if (
		( outputLED4_expected_prev[13] !== 1'bx ) && ( outputLED4_prev[13] !== outputLED4_expected_prev[13] )
		&& ((outputLED4_expected_prev[13] !== last_outputLED4_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[13] = outputLED4_expected_prev[13];
	end
	if (
		( outputLED4_expected_prev[14] !== 1'bx ) && ( outputLED4_prev[14] !== outputLED4_expected_prev[14] )
		&& ((outputLED4_expected_prev[14] !== last_outputLED4_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[14] = outputLED4_expected_prev[14];
	end
	if (
		( outputLED4_expected_prev[15] !== 1'bx ) && ( outputLED4_prev[15] !== outputLED4_expected_prev[15] )
		&& ((outputLED4_expected_prev[15] !== last_outputLED4_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[15] = outputLED4_expected_prev[15];
	end
	if (
		( outputLED4_expected_prev[16] !== 1'bx ) && ( outputLED4_prev[16] !== outputLED4_expected_prev[16] )
		&& ((outputLED4_expected_prev[16] !== last_outputLED4_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[16] = outputLED4_expected_prev[16];
	end
	if (
		( outputLED4_expected_prev[17] !== 1'bx ) && ( outputLED4_prev[17] !== outputLED4_expected_prev[17] )
		&& ((outputLED4_expected_prev[17] !== last_outputLED4_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[17] = outputLED4_expected_prev[17];
	end
	if (
		( outputLED4_expected_prev[18] !== 1'bx ) && ( outputLED4_prev[18] !== outputLED4_expected_prev[18] )
		&& ((outputLED4_expected_prev[18] !== last_outputLED4_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[18] = outputLED4_expected_prev[18];
	end
	if (
		( outputLED4_expected_prev[19] !== 1'bx ) && ( outputLED4_prev[19] !== outputLED4_expected_prev[19] )
		&& ((outputLED4_expected_prev[19] !== last_outputLED4_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[19] = outputLED4_expected_prev[19];
	end
	if (
		( outputLED4_expected_prev[20] !== 1'bx ) && ( outputLED4_prev[20] !== outputLED4_expected_prev[20] )
		&& ((outputLED4_expected_prev[20] !== last_outputLED4_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[20] = outputLED4_expected_prev[20];
	end
	if (
		( outputLED4_expected_prev[21] !== 1'bx ) && ( outputLED4_prev[21] !== outputLED4_expected_prev[21] )
		&& ((outputLED4_expected_prev[21] !== last_outputLED4_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[21] = outputLED4_expected_prev[21];
	end
	if (
		( outputLED4_expected_prev[22] !== 1'bx ) && ( outputLED4_prev[22] !== outputLED4_expected_prev[22] )
		&& ((outputLED4_expected_prev[22] !== last_outputLED4_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[22] = outputLED4_expected_prev[22];
	end
	if (
		( outputLED4_expected_prev[23] !== 1'bx ) && ( outputLED4_prev[23] !== outputLED4_expected_prev[23] )
		&& ((outputLED4_expected_prev[23] !== last_outputLED4_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[23] = outputLED4_expected_prev[23];
	end
	if (
		( outputLED4_expected_prev[24] !== 1'bx ) && ( outputLED4_prev[24] !== outputLED4_expected_prev[24] )
		&& ((outputLED4_expected_prev[24] !== last_outputLED4_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[24] = outputLED4_expected_prev[24];
	end
	if (
		( outputLED4_expected_prev[25] !== 1'bx ) && ( outputLED4_prev[25] !== outputLED4_expected_prev[25] )
		&& ((outputLED4_expected_prev[25] !== last_outputLED4_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[25] = outputLED4_expected_prev[25];
	end
	if (
		( outputLED4_expected_prev[26] !== 1'bx ) && ( outputLED4_prev[26] !== outputLED4_expected_prev[26] )
		&& ((outputLED4_expected_prev[26] !== last_outputLED4_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[26] = outputLED4_expected_prev[26];
	end
	if (
		( outputLED4_expected_prev[27] !== 1'bx ) && ( outputLED4_prev[27] !== outputLED4_expected_prev[27] )
		&& ((outputLED4_expected_prev[27] !== last_outputLED4_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[27] = outputLED4_expected_prev[27];
	end
	if (
		( outputLED4_expected_prev[28] !== 1'bx ) && ( outputLED4_prev[28] !== outputLED4_expected_prev[28] )
		&& ((outputLED4_expected_prev[28] !== last_outputLED4_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[28] = outputLED4_expected_prev[28];
	end
	if (
		( outputLED4_expected_prev[29] !== 1'bx ) && ( outputLED4_prev[29] !== outputLED4_expected_prev[29] )
		&& ((outputLED4_expected_prev[29] !== last_outputLED4_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[29] = outputLED4_expected_prev[29];
	end
	if (
		( outputLED4_expected_prev[30] !== 1'bx ) && ( outputLED4_prev[30] !== outputLED4_expected_prev[30] )
		&& ((outputLED4_expected_prev[30] !== last_outputLED4_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[30] = outputLED4_expected_prev[30];
	end
	if (
		( outputLED4_expected_prev[31] !== 1'bx ) && ( outputLED4_prev[31] !== outputLED4_expected_prev[31] )
		&& ((outputLED4_expected_prev[31] !== last_outputLED4_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED4[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED4_expected_prev);
		$display ("     Real value = %b", outputLED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputLED4_exp[31] = outputLED4_expected_prev[31];
	end
	if (
		( outputLED5_expected_prev[0] !== 1'bx ) && ( outputLED5_prev[0] !== outputLED5_expected_prev[0] )
		&& ((outputLED5_expected_prev[0] !== last_outputLED5_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[0] = outputLED5_expected_prev[0];
	end
	if (
		( outputLED5_expected_prev[1] !== 1'bx ) && ( outputLED5_prev[1] !== outputLED5_expected_prev[1] )
		&& ((outputLED5_expected_prev[1] !== last_outputLED5_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[1] = outputLED5_expected_prev[1];
	end
	if (
		( outputLED5_expected_prev[2] !== 1'bx ) && ( outputLED5_prev[2] !== outputLED5_expected_prev[2] )
		&& ((outputLED5_expected_prev[2] !== last_outputLED5_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[2] = outputLED5_expected_prev[2];
	end
	if (
		( outputLED5_expected_prev[3] !== 1'bx ) && ( outputLED5_prev[3] !== outputLED5_expected_prev[3] )
		&& ((outputLED5_expected_prev[3] !== last_outputLED5_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[3] = outputLED5_expected_prev[3];
	end
	if (
		( outputLED5_expected_prev[4] !== 1'bx ) && ( outputLED5_prev[4] !== outputLED5_expected_prev[4] )
		&& ((outputLED5_expected_prev[4] !== last_outputLED5_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[4] = outputLED5_expected_prev[4];
	end
	if (
		( outputLED5_expected_prev[5] !== 1'bx ) && ( outputLED5_prev[5] !== outputLED5_expected_prev[5] )
		&& ((outputLED5_expected_prev[5] !== last_outputLED5_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[5] = outputLED5_expected_prev[5];
	end
	if (
		( outputLED5_expected_prev[6] !== 1'bx ) && ( outputLED5_prev[6] !== outputLED5_expected_prev[6] )
		&& ((outputLED5_expected_prev[6] !== last_outputLED5_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[6] = outputLED5_expected_prev[6];
	end
	if (
		( outputLED5_expected_prev[7] !== 1'bx ) && ( outputLED5_prev[7] !== outputLED5_expected_prev[7] )
		&& ((outputLED5_expected_prev[7] !== last_outputLED5_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[7] = outputLED5_expected_prev[7];
	end
	if (
		( outputLED5_expected_prev[8] !== 1'bx ) && ( outputLED5_prev[8] !== outputLED5_expected_prev[8] )
		&& ((outputLED5_expected_prev[8] !== last_outputLED5_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[8] = outputLED5_expected_prev[8];
	end
	if (
		( outputLED5_expected_prev[9] !== 1'bx ) && ( outputLED5_prev[9] !== outputLED5_expected_prev[9] )
		&& ((outputLED5_expected_prev[9] !== last_outputLED5_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[9] = outputLED5_expected_prev[9];
	end
	if (
		( outputLED5_expected_prev[10] !== 1'bx ) && ( outputLED5_prev[10] !== outputLED5_expected_prev[10] )
		&& ((outputLED5_expected_prev[10] !== last_outputLED5_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[10] = outputLED5_expected_prev[10];
	end
	if (
		( outputLED5_expected_prev[11] !== 1'bx ) && ( outputLED5_prev[11] !== outputLED5_expected_prev[11] )
		&& ((outputLED5_expected_prev[11] !== last_outputLED5_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[11] = outputLED5_expected_prev[11];
	end
	if (
		( outputLED5_expected_prev[12] !== 1'bx ) && ( outputLED5_prev[12] !== outputLED5_expected_prev[12] )
		&& ((outputLED5_expected_prev[12] !== last_outputLED5_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[12] = outputLED5_expected_prev[12];
	end
	if (
		( outputLED5_expected_prev[13] !== 1'bx ) && ( outputLED5_prev[13] !== outputLED5_expected_prev[13] )
		&& ((outputLED5_expected_prev[13] !== last_outputLED5_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[13] = outputLED5_expected_prev[13];
	end
	if (
		( outputLED5_expected_prev[14] !== 1'bx ) && ( outputLED5_prev[14] !== outputLED5_expected_prev[14] )
		&& ((outputLED5_expected_prev[14] !== last_outputLED5_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[14] = outputLED5_expected_prev[14];
	end
	if (
		( outputLED5_expected_prev[15] !== 1'bx ) && ( outputLED5_prev[15] !== outputLED5_expected_prev[15] )
		&& ((outputLED5_expected_prev[15] !== last_outputLED5_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[15] = outputLED5_expected_prev[15];
	end
	if (
		( outputLED5_expected_prev[16] !== 1'bx ) && ( outputLED5_prev[16] !== outputLED5_expected_prev[16] )
		&& ((outputLED5_expected_prev[16] !== last_outputLED5_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[16] = outputLED5_expected_prev[16];
	end
	if (
		( outputLED5_expected_prev[17] !== 1'bx ) && ( outputLED5_prev[17] !== outputLED5_expected_prev[17] )
		&& ((outputLED5_expected_prev[17] !== last_outputLED5_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[17] = outputLED5_expected_prev[17];
	end
	if (
		( outputLED5_expected_prev[18] !== 1'bx ) && ( outputLED5_prev[18] !== outputLED5_expected_prev[18] )
		&& ((outputLED5_expected_prev[18] !== last_outputLED5_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[18] = outputLED5_expected_prev[18];
	end
	if (
		( outputLED5_expected_prev[19] !== 1'bx ) && ( outputLED5_prev[19] !== outputLED5_expected_prev[19] )
		&& ((outputLED5_expected_prev[19] !== last_outputLED5_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[19] = outputLED5_expected_prev[19];
	end
	if (
		( outputLED5_expected_prev[20] !== 1'bx ) && ( outputLED5_prev[20] !== outputLED5_expected_prev[20] )
		&& ((outputLED5_expected_prev[20] !== last_outputLED5_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[20] = outputLED5_expected_prev[20];
	end
	if (
		( outputLED5_expected_prev[21] !== 1'bx ) && ( outputLED5_prev[21] !== outputLED5_expected_prev[21] )
		&& ((outputLED5_expected_prev[21] !== last_outputLED5_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[21] = outputLED5_expected_prev[21];
	end
	if (
		( outputLED5_expected_prev[22] !== 1'bx ) && ( outputLED5_prev[22] !== outputLED5_expected_prev[22] )
		&& ((outputLED5_expected_prev[22] !== last_outputLED5_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[22] = outputLED5_expected_prev[22];
	end
	if (
		( outputLED5_expected_prev[23] !== 1'bx ) && ( outputLED5_prev[23] !== outputLED5_expected_prev[23] )
		&& ((outputLED5_expected_prev[23] !== last_outputLED5_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[23] = outputLED5_expected_prev[23];
	end
	if (
		( outputLED5_expected_prev[24] !== 1'bx ) && ( outputLED5_prev[24] !== outputLED5_expected_prev[24] )
		&& ((outputLED5_expected_prev[24] !== last_outputLED5_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[24] = outputLED5_expected_prev[24];
	end
	if (
		( outputLED5_expected_prev[25] !== 1'bx ) && ( outputLED5_prev[25] !== outputLED5_expected_prev[25] )
		&& ((outputLED5_expected_prev[25] !== last_outputLED5_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[25] = outputLED5_expected_prev[25];
	end
	if (
		( outputLED5_expected_prev[26] !== 1'bx ) && ( outputLED5_prev[26] !== outputLED5_expected_prev[26] )
		&& ((outputLED5_expected_prev[26] !== last_outputLED5_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[26] = outputLED5_expected_prev[26];
	end
	if (
		( outputLED5_expected_prev[27] !== 1'bx ) && ( outputLED5_prev[27] !== outputLED5_expected_prev[27] )
		&& ((outputLED5_expected_prev[27] !== last_outputLED5_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[27] = outputLED5_expected_prev[27];
	end
	if (
		( outputLED5_expected_prev[28] !== 1'bx ) && ( outputLED5_prev[28] !== outputLED5_expected_prev[28] )
		&& ((outputLED5_expected_prev[28] !== last_outputLED5_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[28] = outputLED5_expected_prev[28];
	end
	if (
		( outputLED5_expected_prev[29] !== 1'bx ) && ( outputLED5_prev[29] !== outputLED5_expected_prev[29] )
		&& ((outputLED5_expected_prev[29] !== last_outputLED5_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[29] = outputLED5_expected_prev[29];
	end
	if (
		( outputLED5_expected_prev[30] !== 1'bx ) && ( outputLED5_prev[30] !== outputLED5_expected_prev[30] )
		&& ((outputLED5_expected_prev[30] !== last_outputLED5_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[30] = outputLED5_expected_prev[30];
	end
	if (
		( outputLED5_expected_prev[31] !== 1'bx ) && ( outputLED5_prev[31] !== outputLED5_expected_prev[31] )
		&& ((outputLED5_expected_prev[31] !== last_outputLED5_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED5[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED5_expected_prev);
		$display ("     Real value = %b", outputLED5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outputLED5_exp[31] = outputLED5_expected_prev[31];
	end
	if (
		( outputLED6_expected_prev[0] !== 1'bx ) && ( outputLED6_prev[0] !== outputLED6_expected_prev[0] )
		&& ((outputLED6_expected_prev[0] !== last_outputLED6_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[0] = outputLED6_expected_prev[0];
	end
	if (
		( outputLED6_expected_prev[1] !== 1'bx ) && ( outputLED6_prev[1] !== outputLED6_expected_prev[1] )
		&& ((outputLED6_expected_prev[1] !== last_outputLED6_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[1] = outputLED6_expected_prev[1];
	end
	if (
		( outputLED6_expected_prev[2] !== 1'bx ) && ( outputLED6_prev[2] !== outputLED6_expected_prev[2] )
		&& ((outputLED6_expected_prev[2] !== last_outputLED6_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[2] = outputLED6_expected_prev[2];
	end
	if (
		( outputLED6_expected_prev[3] !== 1'bx ) && ( outputLED6_prev[3] !== outputLED6_expected_prev[3] )
		&& ((outputLED6_expected_prev[3] !== last_outputLED6_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[3] = outputLED6_expected_prev[3];
	end
	if (
		( outputLED6_expected_prev[4] !== 1'bx ) && ( outputLED6_prev[4] !== outputLED6_expected_prev[4] )
		&& ((outputLED6_expected_prev[4] !== last_outputLED6_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[4] = outputLED6_expected_prev[4];
	end
	if (
		( outputLED6_expected_prev[5] !== 1'bx ) && ( outputLED6_prev[5] !== outputLED6_expected_prev[5] )
		&& ((outputLED6_expected_prev[5] !== last_outputLED6_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[5] = outputLED6_expected_prev[5];
	end
	if (
		( outputLED6_expected_prev[6] !== 1'bx ) && ( outputLED6_prev[6] !== outputLED6_expected_prev[6] )
		&& ((outputLED6_expected_prev[6] !== last_outputLED6_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[6] = outputLED6_expected_prev[6];
	end
	if (
		( outputLED6_expected_prev[7] !== 1'bx ) && ( outputLED6_prev[7] !== outputLED6_expected_prev[7] )
		&& ((outputLED6_expected_prev[7] !== last_outputLED6_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[7] = outputLED6_expected_prev[7];
	end
	if (
		( outputLED6_expected_prev[8] !== 1'bx ) && ( outputLED6_prev[8] !== outputLED6_expected_prev[8] )
		&& ((outputLED6_expected_prev[8] !== last_outputLED6_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[8] = outputLED6_expected_prev[8];
	end
	if (
		( outputLED6_expected_prev[9] !== 1'bx ) && ( outputLED6_prev[9] !== outputLED6_expected_prev[9] )
		&& ((outputLED6_expected_prev[9] !== last_outputLED6_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[9] = outputLED6_expected_prev[9];
	end
	if (
		( outputLED6_expected_prev[10] !== 1'bx ) && ( outputLED6_prev[10] !== outputLED6_expected_prev[10] )
		&& ((outputLED6_expected_prev[10] !== last_outputLED6_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[10] = outputLED6_expected_prev[10];
	end
	if (
		( outputLED6_expected_prev[11] !== 1'bx ) && ( outputLED6_prev[11] !== outputLED6_expected_prev[11] )
		&& ((outputLED6_expected_prev[11] !== last_outputLED6_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[11] = outputLED6_expected_prev[11];
	end
	if (
		( outputLED6_expected_prev[12] !== 1'bx ) && ( outputLED6_prev[12] !== outputLED6_expected_prev[12] )
		&& ((outputLED6_expected_prev[12] !== last_outputLED6_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[12] = outputLED6_expected_prev[12];
	end
	if (
		( outputLED6_expected_prev[13] !== 1'bx ) && ( outputLED6_prev[13] !== outputLED6_expected_prev[13] )
		&& ((outputLED6_expected_prev[13] !== last_outputLED6_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[13] = outputLED6_expected_prev[13];
	end
	if (
		( outputLED6_expected_prev[14] !== 1'bx ) && ( outputLED6_prev[14] !== outputLED6_expected_prev[14] )
		&& ((outputLED6_expected_prev[14] !== last_outputLED6_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[14] = outputLED6_expected_prev[14];
	end
	if (
		( outputLED6_expected_prev[15] !== 1'bx ) && ( outputLED6_prev[15] !== outputLED6_expected_prev[15] )
		&& ((outputLED6_expected_prev[15] !== last_outputLED6_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[15] = outputLED6_expected_prev[15];
	end
	if (
		( outputLED6_expected_prev[16] !== 1'bx ) && ( outputLED6_prev[16] !== outputLED6_expected_prev[16] )
		&& ((outputLED6_expected_prev[16] !== last_outputLED6_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[16] = outputLED6_expected_prev[16];
	end
	if (
		( outputLED6_expected_prev[17] !== 1'bx ) && ( outputLED6_prev[17] !== outputLED6_expected_prev[17] )
		&& ((outputLED6_expected_prev[17] !== last_outputLED6_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[17] = outputLED6_expected_prev[17];
	end
	if (
		( outputLED6_expected_prev[18] !== 1'bx ) && ( outputLED6_prev[18] !== outputLED6_expected_prev[18] )
		&& ((outputLED6_expected_prev[18] !== last_outputLED6_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[18] = outputLED6_expected_prev[18];
	end
	if (
		( outputLED6_expected_prev[19] !== 1'bx ) && ( outputLED6_prev[19] !== outputLED6_expected_prev[19] )
		&& ((outputLED6_expected_prev[19] !== last_outputLED6_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[19] = outputLED6_expected_prev[19];
	end
	if (
		( outputLED6_expected_prev[20] !== 1'bx ) && ( outputLED6_prev[20] !== outputLED6_expected_prev[20] )
		&& ((outputLED6_expected_prev[20] !== last_outputLED6_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[20] = outputLED6_expected_prev[20];
	end
	if (
		( outputLED6_expected_prev[21] !== 1'bx ) && ( outputLED6_prev[21] !== outputLED6_expected_prev[21] )
		&& ((outputLED6_expected_prev[21] !== last_outputLED6_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[21] = outputLED6_expected_prev[21];
	end
	if (
		( outputLED6_expected_prev[22] !== 1'bx ) && ( outputLED6_prev[22] !== outputLED6_expected_prev[22] )
		&& ((outputLED6_expected_prev[22] !== last_outputLED6_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[22] = outputLED6_expected_prev[22];
	end
	if (
		( outputLED6_expected_prev[23] !== 1'bx ) && ( outputLED6_prev[23] !== outputLED6_expected_prev[23] )
		&& ((outputLED6_expected_prev[23] !== last_outputLED6_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[23] = outputLED6_expected_prev[23];
	end
	if (
		( outputLED6_expected_prev[24] !== 1'bx ) && ( outputLED6_prev[24] !== outputLED6_expected_prev[24] )
		&& ((outputLED6_expected_prev[24] !== last_outputLED6_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[24] = outputLED6_expected_prev[24];
	end
	if (
		( outputLED6_expected_prev[25] !== 1'bx ) && ( outputLED6_prev[25] !== outputLED6_expected_prev[25] )
		&& ((outputLED6_expected_prev[25] !== last_outputLED6_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[25] = outputLED6_expected_prev[25];
	end
	if (
		( outputLED6_expected_prev[26] !== 1'bx ) && ( outputLED6_prev[26] !== outputLED6_expected_prev[26] )
		&& ((outputLED6_expected_prev[26] !== last_outputLED6_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[26] = outputLED6_expected_prev[26];
	end
	if (
		( outputLED6_expected_prev[27] !== 1'bx ) && ( outputLED6_prev[27] !== outputLED6_expected_prev[27] )
		&& ((outputLED6_expected_prev[27] !== last_outputLED6_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[27] = outputLED6_expected_prev[27];
	end
	if (
		( outputLED6_expected_prev[28] !== 1'bx ) && ( outputLED6_prev[28] !== outputLED6_expected_prev[28] )
		&& ((outputLED6_expected_prev[28] !== last_outputLED6_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[28] = outputLED6_expected_prev[28];
	end
	if (
		( outputLED6_expected_prev[29] !== 1'bx ) && ( outputLED6_prev[29] !== outputLED6_expected_prev[29] )
		&& ((outputLED6_expected_prev[29] !== last_outputLED6_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[29] = outputLED6_expected_prev[29];
	end
	if (
		( outputLED6_expected_prev[30] !== 1'bx ) && ( outputLED6_prev[30] !== outputLED6_expected_prev[30] )
		&& ((outputLED6_expected_prev[30] !== last_outputLED6_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[30] = outputLED6_expected_prev[30];
	end
	if (
		( outputLED6_expected_prev[31] !== 1'bx ) && ( outputLED6_prev[31] !== outputLED6_expected_prev[31] )
		&& ((outputLED6_expected_prev[31] !== last_outputLED6_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLED6[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLED6_expected_prev);
		$display ("     Real value = %b", outputLED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outputLED6_exp[31] = outputLED6_expected_prev[31];
	end
	if (
		( outputSignal_expected_prev !== 1'bx ) && ( outputSignal_prev !== outputSignal_expected_prev )
		&& ((outputSignal_expected_prev !== last_outputSignal_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputSignal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputSignal_expected_prev);
		$display ("     Real value = %b", outputSignal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outputSignal_exp = outputSignal_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Generator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] inputBinaryLevel;
// wires                                               
wire [31:0] outputLED1;
wire [31:0] outputLED2;
wire [31:0] outputLED3;
wire [31:0] outputLED4;
wire [31:0] outputLED5;
wire [31:0] outputLED6;
wire outputSignal;

wire sampler;                             

// assign statements (if any)                          
Generator i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.inputBinaryLevel(inputBinaryLevel),
	.outputLED1(outputLED1),
	.outputLED2(outputLED2),
	.outputLED3(outputLED3),
	.outputLED4(outputLED4),
	.outputLED5(outputLED5),
	.outputLED6(outputLED6),
	.outputSignal(outputSignal)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 
// inputBinaryLevel[ 9 ]
initial
begin
	inputBinaryLevel[9] = 1'b0;
	inputBinaryLevel[9] = #1360000 1'b1;
	inputBinaryLevel[9] = #4800000 1'b0;
end 
// inputBinaryLevel[ 8 ]
initial
begin
	inputBinaryLevel[8] = 1'b0;
	inputBinaryLevel[8] = #1280000 1'b1;
end 
// inputBinaryLevel[ 7 ]
initial
begin
	inputBinaryLevel[7] = 1'b0;
	inputBinaryLevel[7] = #1280000 1'b1;
end 
// inputBinaryLevel[ 6 ]
initial
begin
	inputBinaryLevel[6] = 1'b0;
	inputBinaryLevel[6] = #1280000 1'b1;
end 
// inputBinaryLevel[ 5 ]
initial
begin
	inputBinaryLevel[5] = 1'b0;
	inputBinaryLevel[5] = #1280000 1'b1;
end 
// inputBinaryLevel[ 4 ]
initial
begin
	inputBinaryLevel[4] = 1'b0;
	inputBinaryLevel[4] = #1280000 1'b1;
end 
// inputBinaryLevel[ 3 ]
initial
begin
	inputBinaryLevel[3] = 1'b0;
	inputBinaryLevel[3] = #1280000 1'b1;
end 
// inputBinaryLevel[ 2 ]
initial
begin
	inputBinaryLevel[2] = 1'b0;
	inputBinaryLevel[2] = #1280000 1'b1;
	inputBinaryLevel[2] = #7040000 1'b0;
end 
// inputBinaryLevel[ 1 ]
initial
begin
	inputBinaryLevel[1] = 1'b0;
	inputBinaryLevel[1] = #1360000 1'b1;
	inputBinaryLevel[1] = #4800000 1'b0;
end 
// inputBinaryLevel[ 0 ]
initial
begin
	inputBinaryLevel[0] = 1'b0;
	inputBinaryLevel[0] = #1360000 1'b1;
	inputBinaryLevel[0] = #4800000 1'b0;
end 

Generator_vlg_sample_tst tb_sample (
	.clk(clk),
	.inputBinaryLevel(inputBinaryLevel),
	.sampler_tx(sampler)
);

Generator_vlg_check_tst tb_out(
	.outputLED1(outputLED1),
	.outputLED2(outputLED2),
	.outputLED3(outputLED3),
	.outputLED4(outputLED4),
	.outputLED5(outputLED5),
	.outputLED6(outputLED6),
	.outputSignal(outputSignal),
	.sampler_rx(sampler)
);
endmodule

